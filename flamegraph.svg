<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1014" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="997.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="997.00"> </text><svg id="frames" x="10" width="1180" total_samples="7710"><g><title>bench_spaceheater::load_replay (1 samples, 0.01%)</title><rect x="0.0000%" y="709" width="0.0130%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>topsnek::util::gamelogger::Game::load (1 samples, 0.01%)</title><rect x="0.0000%" y="693" width="0.0130%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>serde_json::de::from_slice (1 samples, 0.01%)</title><rect x="0.0000%" y="677" width="0.0130%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.01%)</title><rect x="0.0000%" y="661" width="0.0130%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>topsnek::util::gamelogger::_::&lt;impl serde::de::Deserialize for topsnek::util::gamelogger::Game&gt;::deserialize (1 samples, 0.01%)</title><rect x="0.0000%" y="645" width="0.0130%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.01%)</title><rect x="0.0000%" y="629" width="0.0130%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>&lt;topsnek::util::gamelogger::_::&lt;impl serde::de::Deserialize for topsnek::util::gamelogger::Game&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.01%)</title><rect x="0.0000%" y="613" width="0.0130%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.01%)</title><rect x="0.0000%" y="597" width="0.0130%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.01%)</title><rect x="0.0000%" y="581" width="0.0130%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.01%)</title><rect x="0.0000%" y="565" width="0.0130%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (1 samples, 0.01%)</title><rect x="0.0000%" y="549" width="0.0130%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 0.01%)</title><rect x="0.0000%" y="533" width="0.0130%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.01%)</title><rect x="0.0000%" y="517" width="0.0130%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.01%)</title><rect x="0.0000%" y="501" width="0.0130%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.01%)</title><rect x="0.0000%" y="485" width="0.0130%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.01%)</title><rect x="0.0000%" y="469" width="0.0130%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for (T0,T1)&gt;::deserialize (1 samples, 0.01%)</title><rect x="0.0000%" y="453" width="0.0130%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.01%)</title><rect x="0.0000%" y="437" width="0.0130%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 0.01%)</title><rect x="0.0000%" y="421" width="0.0130%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for (T0,T1)&gt;::deserialize::TupleVisitor&lt;T0,T1&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.01%)</title><rect x="0.0000%" y="405" width="0.0130%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.01%)</title><rect x="0.0000%" y="389" width="0.0130%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.01%)</title><rect x="0.0000%" y="373" width="0.0130%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.01%)</title><rect x="0.0000%" y="357" width="0.0130%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>topsnek::protocol::_::&lt;impl serde::de::Deserialize for topsnek::protocol::Request&gt;::deserialize (1 samples, 0.01%)</title><rect x="0.0000%" y="341" width="0.0130%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.01%)</title><rect x="0.0000%" y="325" width="0.0130%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>&lt;topsnek::protocol::_::&lt;impl serde::de::Deserialize for topsnek::protocol::Request&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.01%)</title><rect x="0.0000%" y="309" width="0.0130%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.01%)</title><rect x="0.0000%" y="293" width="0.0130%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.01%)</title><rect x="0.0000%" y="277" width="0.0130%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.01%)</title><rect x="0.0000%" y="261" width="0.0130%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>topsnek::protocol::_::&lt;impl serde::de::Deserialize for topsnek::protocol::Board&gt;::deserialize (1 samples, 0.01%)</title><rect x="0.0000%" y="245" width="0.0130%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.01%)</title><rect x="0.0000%" y="229" width="0.0130%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>&lt;topsnek::protocol::_::&lt;impl serde::de::Deserialize for topsnek::protocol::Board&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.01%)</title><rect x="0.0000%" y="213" width="0.0130%" height="15" fill="rgb(229,88,8)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.01%)</title><rect x="0.0000%" y="197" width="0.0130%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.01%)</title><rect x="0.0000%" y="181" width="0.0130%" height="15" fill="rgb(254,191,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.01%)</title><rect x="0.0000%" y="165" width="0.0130%" height="15" fill="rgb(241,83,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (1 samples, 0.01%)</title><rect x="0.0000%" y="149" width="0.0130%" height="15" fill="rgb(233,36,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 0.01%)</title><rect x="0.0000%" y="133" width="0.0130%" height="15" fill="rgb(226,3,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="143.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.01%)</title><rect x="0.0000%" y="117" width="0.0130%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="1"/><text x="0.2500%" y="127.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.01%)</title><rect x="0.0000%" y="101" width="0.0130%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="1"/><text x="0.2500%" y="111.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.01%)</title><rect x="0.0000%" y="85" width="0.0130%" height="15" fill="rgb(232,182,51)" fg:x="0" fg:w="1"/><text x="0.2500%" y="95.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.01%)</title><rect x="0.0000%" y="69" width="0.0130%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="79.50"></text></g><g><title>topsnek::protocol::_::&lt;impl serde::de::Deserialize for topsnek::protocol::Point&gt;::deserialize (1 samples, 0.01%)</title><rect x="0.0000%" y="53" width="0.0130%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="1"/><text x="0.2500%" y="63.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.01%)</title><rect x="0.0000%" y="37" width="0.0130%" height="15" fill="rgb(235,93,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="47.50"></text></g><g><title>main (2 samples, 0.03%)</title><rect x="0.0000%" y="933" width="0.0259%" height="15" fill="rgb(213,116,39)" fg:x="0" fg:w="2"/><text x="0.2500%" y="943.50"></text></g><g><title>std::rt::lang_start_internal (2 samples, 0.03%)</title><rect x="0.0000%" y="917" width="0.0259%" height="15" fill="rgb(222,207,29)" fg:x="0" fg:w="2"/><text x="0.2500%" y="927.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.03%)</title><rect x="0.0000%" y="901" width="0.0259%" height="15" fill="rgb(206,96,30)" fg:x="0" fg:w="2"/><text x="0.2500%" y="911.50"></text></g><g><title>std::panicking::try (2 samples, 0.03%)</title><rect x="0.0000%" y="885" width="0.0259%" height="15" fill="rgb(218,138,4)" fg:x="0" fg:w="2"/><text x="0.2500%" y="895.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.03%)</title><rect x="0.0000%" y="869" width="0.0259%" height="15" fill="rgb(250,191,14)" fg:x="0" fg:w="2"/><text x="0.2500%" y="879.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (2 samples, 0.03%)</title><rect x="0.0000%" y="853" width="0.0259%" height="15" fill="rgb(239,60,40)" fg:x="0" fg:w="2"/><text x="0.2500%" y="863.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.03%)</title><rect x="0.0000%" y="837" width="0.0259%" height="15" fill="rgb(206,27,48)" fg:x="0" fg:w="2"/><text x="0.2500%" y="847.50"></text></g><g><title>std::panicking::try (2 samples, 0.03%)</title><rect x="0.0000%" y="821" width="0.0259%" height="15" fill="rgb(225,35,8)" fg:x="0" fg:w="2"/><text x="0.2500%" y="831.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.03%)</title><rect x="0.0000%" y="805" width="0.0259%" height="15" fill="rgb(250,213,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="815.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2 samples, 0.03%)</title><rect x="0.0000%" y="789" width="0.0259%" height="15" fill="rgb(247,123,22)" fg:x="0" fg:w="2"/><text x="0.2500%" y="799.50"></text></g><g><title>std::rt::lang_start::{{closure}} (2 samples, 0.03%)</title><rect x="0.0000%" y="773" width="0.0259%" height="15" fill="rgb(231,138,38)" fg:x="0" fg:w="2"/><text x="0.2500%" y="783.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.03%)</title><rect x="0.0000%" y="757" width="0.0259%" height="15" fill="rgb(231,145,46)" fg:x="0" fg:w="2"/><text x="0.2500%" y="767.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.03%)</title><rect x="0.0000%" y="741" width="0.0259%" height="15" fill="rgb(251,118,11)" fg:x="0" fg:w="2"/><text x="0.2500%" y="751.50"></text></g><g><title>bench_spaceheater::main (2 samples, 0.03%)</title><rect x="0.0000%" y="725" width="0.0259%" height="15" fill="rgb(217,147,25)" fg:x="0" fg:w="2"/><text x="0.2500%" y="735.50"></text></g><g><title>bench_spaceheater::solve_game (1 samples, 0.01%)</title><rect x="0.0130%" y="709" width="0.0130%" height="15" fill="rgb(247,81,37)" fg:x="1" fg:w="1"/><text x="0.2630%" y="719.50"></text></g><g><title>topsnek::snakes::spaceheater::game_solver::GameSolver&lt;T&gt;::solve (1 samples, 0.01%)</title><rect x="0.0130%" y="693" width="0.0130%" height="15" fill="rgb(209,12,38)" fg:x="1" fg:w="1"/><text x="0.2630%" y="703.50"></text></g><g><title>topsnek::snakes::spaceheater::game_solver::evaluate_game (1 samples, 0.01%)</title><rect x="0.0130%" y="677" width="0.0130%" height="15" fill="rgb(227,1,9)" fg:x="1" fg:w="1"/><text x="0.2630%" y="687.50"></text></g><g><title>topsnek::logic::scoring::tournament_voronoi (1 samples, 0.01%)</title><rect x="0.0130%" y="661" width="0.0130%" height="15" fill="rgb(248,47,43)" fg:x="1" fg:w="1"/><text x="0.2630%" y="671.50"></text></g><g><title>topsnek::logic::scoring::voronoi (1 samples, 0.01%)</title><rect x="0.0130%" y="645" width="0.0130%" height="15" fill="rgb(221,10,30)" fg:x="1" fg:w="1"/><text x="0.2630%" y="655.50"></text></g><g><title>topsnek::logic::voronoi::me_stack (1 samples, 0.01%)</title><rect x="0.0130%" y="629" width="0.0130%" height="15" fill="rgb(210,229,1)" fg:x="1" fg:w="1"/><text x="0.2630%" y="639.50"></text></g><g><title>topsnek::logic::point::&lt;impl topsnek::protocol::Point&gt;::neighbours (1 samples, 0.01%)</title><rect x="0.0130%" y="613" width="0.0130%" height="15" fill="rgb(222,148,37)" fg:x="1" fg:w="1"/><text x="0.2630%" y="623.50"></text></g><g><title>core::array::&lt;impl [T (1 samples, 0.01%)</title><rect x="0.0130%" y="597" width="0.0130%" height="15" fill="rgb(234,67,33)" fg:x="1" fg:w="1"/><text x="0.2630%" y="607.50"></text></g><g><title> N]&gt;::map (1 samples, 0.01%)</title><rect x="0.0130%" y="581" width="0.0130%" height="15" fill="rgb(247,98,35)" fg:x="1" fg:w="1"/><text x="0.2630%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;topsnek::protocol::Ruleset&gt;&gt; (14 samples, 0.18%)</title><rect x="0.1297%" y="549" width="0.1816%" height="15" fill="rgb(247,138,52)" fg:x="10" fg:w="14"/><text x="0.3797%" y="559.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.18%)</title><rect x="0.1297%" y="533" width="0.1816%" height="15" fill="rgb(213,79,30)" fg:x="10" fg:w="14"/><text x="0.3797%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (14 samples, 0.18%)</title><rect x="0.1297%" y="517" width="0.1816%" height="15" fill="rgb(246,177,23)" fg:x="10" fg:w="14"/><text x="0.3797%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (14 samples, 0.18%)</title><rect x="0.1297%" y="501" width="0.1816%" height="15" fill="rgb(230,62,27)" fg:x="10" fg:w="14"/><text x="0.3797%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.05%)</title><rect x="0.3113%" y="517" width="0.0519%" height="15" fill="rgb(216,154,8)" fg:x="24" fg:w="4"/><text x="0.5613%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (29 samples, 0.38%)</title><rect x="0.4021%" y="485" width="0.3761%" height="15" fill="rgb(244,35,45)" fg:x="31" fg:w="29"/><text x="0.6521%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (29 samples, 0.38%)</title><rect x="0.4021%" y="469" width="0.3761%" height="15" fill="rgb(251,115,12)" fg:x="31" fg:w="29"/><text x="0.6521%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (29 samples, 0.38%)</title><rect x="0.4021%" y="453" width="0.3761%" height="15" fill="rgb(240,54,50)" fg:x="31" fg:w="29"/><text x="0.6521%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.38%)</title><rect x="0.4021%" y="437" width="0.3761%" height="15" fill="rgb(233,84,52)" fg:x="31" fg:w="29"/><text x="0.6521%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.10%)</title><rect x="0.6744%" y="421" width="0.1038%" height="15" fill="rgb(207,117,47)" fg:x="52" fg:w="8"/><text x="0.9244%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.10%)</title><rect x="0.6744%" y="405" width="0.1038%" height="15" fill="rgb(249,43,39)" fg:x="52" fg:w="8"/><text x="0.9244%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 0.74%)</title><rect x="0.3113%" y="533" width="0.7393%" height="15" fill="rgb(209,38,44)" fg:x="24" fg:w="57"/><text x="0.5613%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[topsnek::protocol::Snake]&gt; (53 samples, 0.69%)</title><rect x="0.3632%" y="517" width="0.6874%" height="15" fill="rgb(236,212,23)" fg:x="28" fg:w="53"/><text x="0.6132%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;topsnek::protocol::Snake&gt; (50 samples, 0.65%)</title><rect x="0.4021%" y="501" width="0.6485%" height="15" fill="rgb(242,79,21)" fg:x="31" fg:w="50"/><text x="0.6521%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;topsnek::protocol::Customizations&gt; (21 samples, 0.27%)</title><rect x="0.7782%" y="485" width="0.2724%" height="15" fill="rgb(211,96,35)" fg:x="60" fg:w="21"/><text x="1.0282%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (21 samples, 0.27%)</title><rect x="0.7782%" y="469" width="0.2724%" height="15" fill="rgb(253,215,40)" fg:x="60" fg:w="21"/><text x="1.0282%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (21 samples, 0.27%)</title><rect x="0.7782%" y="453" width="0.2724%" height="15" fill="rgb(211,81,21)" fg:x="60" fg:w="21"/><text x="1.0282%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (21 samples, 0.27%)</title><rect x="0.7782%" y="437" width="0.2724%" height="15" fill="rgb(208,190,38)" fg:x="60" fg:w="21"/><text x="1.0282%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.27%)</title><rect x="0.7782%" y="421" width="0.2724%" height="15" fill="rgb(235,213,38)" fg:x="60" fg:w="21"/><text x="1.0282%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.04%)</title><rect x="1.0117%" y="405" width="0.0389%" height="15" fill="rgb(237,122,38)" fg:x="78" fg:w="3"/><text x="1.2617%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.04%)</title><rect x="1.0117%" y="389" width="0.0389%" height="15" fill="rgb(244,218,35)" fg:x="78" fg:w="3"/><text x="1.2617%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;topsnek::protocol::Snake&gt;&gt; (58 samples, 0.75%)</title><rect x="0.3113%" y="549" width="0.7523%" height="15" fill="rgb(240,68,47)" fg:x="24" fg:w="58"/><text x="0.5613%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;topsnek::protocol::Snake&gt;&gt; (1 samples, 0.01%)</title><rect x="1.0506%" y="533" width="0.0130%" height="15" fill="rgb(210,16,53)" fg:x="81" fg:w="1"/><text x="1.3006%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="1.0506%" y="517" width="0.0130%" height="15" fill="rgb(235,124,12)" fg:x="81" fg:w="1"/><text x="1.3006%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="1.0506%" y="501" width="0.0130%" height="15" fill="rgb(224,169,11)" fg:x="81" fg:w="1"/><text x="1.3006%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="1.0506%" y="485" width="0.0130%" height="15" fill="rgb(250,166,2)" fg:x="81" fg:w="1"/><text x="1.3006%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;topsnek::logic::board::Board&gt; (2 samples, 0.03%)</title><rect x="1.0636%" y="549" width="0.0259%" height="15" fill="rgb(242,216,29)" fg:x="82" fg:w="2"/><text x="1.3136%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.03%)</title><rect x="1.0636%" y="533" width="0.0259%" height="15" fill="rgb(230,116,27)" fg:x="82" fg:w="2"/><text x="1.3136%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.03%)</title><rect x="1.0636%" y="517" width="0.0259%" height="15" fill="rgb(228,99,48)" fg:x="82" fg:w="2"/><text x="1.3136%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="1.0636%" y="501" width="0.0259%" height="15" fill="rgb(253,11,6)" fg:x="82" fg:w="2"/><text x="1.3136%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.03%)</title><rect x="1.0636%" y="485" width="0.0259%" height="15" fill="rgb(247,143,39)" fg:x="82" fg:w="2"/><text x="1.3136%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.03%)</title><rect x="1.0636%" y="469" width="0.0259%" height="15" fill="rgb(236,97,10)" fg:x="82" fg:w="2"/><text x="1.3136%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;topsnek::protocol::Point&gt;&gt; (23 samples, 0.30%)</title><rect x="1.0895%" y="533" width="0.2983%" height="15" fill="rgb(233,208,19)" fg:x="84" fg:w="23"/><text x="1.3395%" y="543.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.30%)</title><rect x="1.0895%" y="517" width="0.2983%" height="15" fill="rgb(216,164,2)" fg:x="84" fg:w="23"/><text x="1.3395%" y="527.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::as_mut_slices (23 samples, 0.30%)</title><rect x="1.0895%" y="501" width="0.2983%" height="15" fill="rgb(220,129,5)" fg:x="84" fg:w="23"/><text x="1.3395%" y="511.50"></text></g><g><title>alloc::collections::vec_deque::ring_slices::RingSlices::ring_slices (9 samples, 0.12%)</title><rect x="1.2711%" y="485" width="0.1167%" height="15" fill="rgb(242,17,10)" fg:x="98" fg:w="9"/><text x="1.5211%" y="495.50"></text></g><g><title>&lt;&amp;mut [T] as alloc::collections::vec_deque::ring_slices::RingSlices&gt;::slice (9 samples, 0.12%)</title><rect x="1.2711%" y="469" width="0.1167%" height="15" fill="rgb(242,107,0)" fg:x="98" fg:w="9"/><text x="1.5211%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (9 samples, 0.12%)</title><rect x="1.2711%" y="453" width="0.1167%" height="15" fill="rgb(251,28,31)" fg:x="98" fg:w="9"/><text x="1.5211%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (9 samples, 0.12%)</title><rect x="1.2711%" y="437" width="0.1167%" height="15" fill="rgb(233,223,10)" fg:x="98" fg:w="9"/><text x="1.5211%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (105 samples, 1.36%)</title><rect x="0.0389%" y="725" width="1.3619%" height="15" fill="rgb(215,21,27)" fg:x="3" fg:w="105"/><text x="0.2889%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (105 samples, 1.36%)</title><rect x="0.0389%" y="709" width="1.3619%" height="15" fill="rgb(232,23,21)" fg:x="3" fg:w="105"/><text x="0.2889%" y="719.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (105 samples, 1.36%)</title><rect x="0.0389%" y="693" width="1.3619%" height="15" fill="rgb(244,5,23)" fg:x="3" fg:w="105"/><text x="0.2889%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (105 samples, 1.36%)</title><rect x="0.0389%" y="677" width="1.3619%" height="15" fill="rgb(226,81,46)" fg:x="3" fg:w="105"/><text x="0.2889%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (104 samples, 1.35%)</title><rect x="0.0519%" y="661" width="1.3489%" height="15" fill="rgb(247,70,30)" fg:x="4" fg:w="104"/><text x="0.3019%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (104 samples, 1.35%)</title><rect x="0.0519%" y="645" width="1.3489%" height="15" fill="rgb(212,68,19)" fg:x="4" fg:w="104"/><text x="0.3019%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (104 samples, 1.35%)</title><rect x="0.0519%" y="629" width="1.3489%" height="15" fill="rgb(240,187,13)" fg:x="4" fg:w="104"/><text x="0.3019%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (104 samples, 1.35%)</title><rect x="0.0519%" y="613" width="1.3489%" height="15" fill="rgb(223,113,26)" fg:x="4" fg:w="104"/><text x="0.3019%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (102 samples, 1.32%)</title><rect x="0.0778%" y="597" width="1.3230%" height="15" fill="rgb(206,192,2)" fg:x="6" fg:w="102"/><text x="0.3278%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;topsnek::snakes::spaceheater::game_solver::WorkItem&gt; (102 samples, 1.32%)</title><rect x="0.0778%" y="581" width="1.3230%" height="15" fill="rgb(241,108,4)" fg:x="6" fg:w="102"/><text x="0.3278%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;topsnek::logic::game::Game&gt; (101 samples, 1.31%)</title><rect x="0.0908%" y="565" width="1.3100%" height="15" fill="rgb(247,173,49)" fg:x="7" fg:w="101"/><text x="0.3408%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;topsnek::protocol::Snake&gt; (24 samples, 0.31%)</title><rect x="1.0895%" y="549" width="0.3113%" height="15" fill="rgb(224,114,35)" fg:x="84" fg:w="24"/><text x="1.3395%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.01%)</title><rect x="1.3878%" y="533" width="0.0130%" height="15" fill="rgb(245,159,27)" fg:x="107" fg:w="1"/><text x="1.6378%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="1.3878%" y="517" width="0.0130%" height="15" fill="rgb(245,172,44)" fg:x="107" fg:w="1"/><text x="1.6378%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="1.3878%" y="501" width="0.0130%" height="15" fill="rgb(236,23,11)" fg:x="107" fg:w="1"/><text x="1.6378%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="1.3878%" y="485" width="0.0130%" height="15" fill="rgb(205,117,38)" fg:x="107" fg:w="1"/><text x="1.6378%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="1.3878%" y="469" width="0.0130%" height="15" fill="rgb(237,72,25)" fg:x="107" fg:w="1"/><text x="1.6378%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="1.3878%" y="453" width="0.0130%" height="15" fill="rgb(244,70,9)" fg:x="107" fg:w="1"/><text x="1.6378%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;topsnek::protocol::Ruleset&gt;&gt; (4 samples, 0.05%)</title><rect x="1.4008%" y="709" width="0.0519%" height="15" fill="rgb(217,125,39)" fg:x="108" fg:w="4"/><text x="1.6508%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="1.4008%" y="693" width="0.0519%" height="15" fill="rgb(235,36,10)" fg:x="108" fg:w="4"/><text x="1.6508%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.05%)</title><rect x="1.4008%" y="677" width="0.0519%" height="15" fill="rgb(251,123,47)" fg:x="108" fg:w="4"/><text x="1.6508%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.05%)</title><rect x="1.4008%" y="661" width="0.0519%" height="15" fill="rgb(221,13,13)" fg:x="108" fg:w="4"/><text x="1.6508%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;topsnek::logic::game::Game&gt; (5 samples, 0.06%)</title><rect x="1.4008%" y="725" width="0.0649%" height="15" fill="rgb(238,131,9)" fg:x="108" fg:w="5"/><text x="1.6508%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;topsnek::protocol::Snake&gt; (1 samples, 0.01%)</title><rect x="1.4527%" y="709" width="0.0130%" height="15" fill="rgb(211,50,8)" fg:x="112" fg:w="1"/><text x="1.7027%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.01%)</title><rect x="1.4527%" y="693" width="0.0130%" height="15" fill="rgb(245,182,24)" fg:x="112" fg:w="1"/><text x="1.7027%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="1.4527%" y="677" width="0.0130%" height="15" fill="rgb(242,14,37)" fg:x="112" fg:w="1"/><text x="1.7027%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="1.4527%" y="661" width="0.0130%" height="15" fill="rgb(246,228,12)" fg:x="112" fg:w="1"/><text x="1.7027%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="1.4527%" y="645" width="0.0130%" height="15" fill="rgb(213,55,15)" fg:x="112" fg:w="1"/><text x="1.7027%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="1.4527%" y="629" width="0.0130%" height="15" fill="rgb(209,9,3)" fg:x="112" fg:w="1"/><text x="1.7027%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="1.4527%" y="613" width="0.0130%" height="15" fill="rgb(230,59,30)" fg:x="112" fg:w="1"/><text x="1.7027%" y="623.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="2.2827%" y="549" width="0.0130%" height="15" fill="rgb(209,121,21)" fg:x="176" fg:w="1"/><text x="2.5327%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="2.2827%" y="533" width="0.0130%" height="15" fill="rgb(220,109,13)" fg:x="176" fg:w="1"/><text x="2.5327%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.06%)</title><rect x="2.2438%" y="709" width="0.0649%" height="15" fill="rgb(232,18,1)" fg:x="173" fg:w="5"/><text x="2.4938%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.06%)</title><rect x="2.2438%" y="693" width="0.0649%" height="15" fill="rgb(215,41,42)" fg:x="173" fg:w="5"/><text x="2.4938%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.06%)</title><rect x="2.2438%" y="677" width="0.0649%" height="15" fill="rgb(224,123,36)" fg:x="173" fg:w="5"/><text x="2.4938%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.06%)</title><rect x="2.2438%" y="661" width="0.0649%" height="15" fill="rgb(240,125,3)" fg:x="173" fg:w="5"/><text x="2.4938%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.06%)</title><rect x="2.2438%" y="645" width="0.0649%" height="15" fill="rgb(205,98,50)" fg:x="173" fg:w="5"/><text x="2.4938%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.06%)</title><rect x="2.2438%" y="629" width="0.0649%" height="15" fill="rgb(205,185,37)" fg:x="173" fg:w="5"/><text x="2.4938%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.06%)</title><rect x="2.2438%" y="613" width="0.0649%" height="15" fill="rgb(238,207,15)" fg:x="173" fg:w="5"/><text x="2.4938%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.06%)</title><rect x="2.2438%" y="597" width="0.0649%" height="15" fill="rgb(213,199,42)" fg:x="173" fg:w="5"/><text x="2.4938%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.06%)</title><rect x="2.2438%" y="581" width="0.0649%" height="15" fill="rgb(235,201,11)" fg:x="173" fg:w="5"/><text x="2.4938%" y="591.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.06%)</title><rect x="2.2438%" y="565" width="0.0649%" height="15" fill="rgb(207,46,11)" fg:x="173" fg:w="5"/><text x="2.4938%" y="575.50"></text></g><g><title>rust_oom (1 samples, 0.01%)</title><rect x="2.2957%" y="549" width="0.0130%" height="15" fill="rgb(241,35,35)" fg:x="177" fg:w="1"/><text x="2.5457%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.06%)</title><rect x="2.3087%" y="613" width="0.0649%" height="15" fill="rgb(243,32,47)" fg:x="178" fg:w="5"/><text x="2.5587%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.06%)</title><rect x="2.3087%" y="597" width="0.0649%" height="15" fill="rgb(247,202,23)" fg:x="178" fg:w="5"/><text x="2.5587%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.06%)</title><rect x="2.3087%" y="581" width="0.0649%" height="15" fill="rgb(219,102,11)" fg:x="178" fg:w="5"/><text x="2.5587%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (5 samples, 0.06%)</title><rect x="2.3735%" y="613" width="0.0649%" height="15" fill="rgb(243,110,44)" fg:x="183" fg:w="5"/><text x="2.6235%" y="623.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (5 samples, 0.06%)</title><rect x="2.3735%" y="597" width="0.0649%" height="15" fill="rgb(222,74,54)" fg:x="183" fg:w="5"/><text x="2.6235%" y="607.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (5 samples, 0.06%)</title><rect x="2.3735%" y="581" width="0.0649%" height="15" fill="rgb(216,99,12)" fg:x="183" fg:w="5"/><text x="2.6235%" y="591.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (5 samples, 0.06%)</title><rect x="2.3735%" y="565" width="0.0649%" height="15" fill="rgb(226,22,26)" fg:x="183" fg:w="5"/><text x="2.6235%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (12 samples, 0.16%)</title><rect x="2.3087%" y="709" width="0.1556%" height="15" fill="rgb(217,163,10)" fg:x="178" fg:w="12"/><text x="2.5587%" y="719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (12 samples, 0.16%)</title><rect x="2.3087%" y="693" width="0.1556%" height="15" fill="rgb(213,25,53)" fg:x="178" fg:w="12"/><text x="2.5587%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (12 samples, 0.16%)</title><rect x="2.3087%" y="677" width="0.1556%" height="15" fill="rgb(252,105,26)" fg:x="178" fg:w="12"/><text x="2.5587%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (12 samples, 0.16%)</title><rect x="2.3087%" y="661" width="0.1556%" height="15" fill="rgb(220,39,43)" fg:x="178" fg:w="12"/><text x="2.5587%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (12 samples, 0.16%)</title><rect x="2.3087%" y="645" width="0.1556%" height="15" fill="rgb(229,68,48)" fg:x="178" fg:w="12"/><text x="2.5587%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (12 samples, 0.16%)</title><rect x="2.3087%" y="629" width="0.1556%" height="15" fill="rgb(252,8,32)" fg:x="178" fg:w="12"/><text x="2.5587%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.03%)</title><rect x="2.4384%" y="613" width="0.0259%" height="15" fill="rgb(223,20,43)" fg:x="188" fg:w="2"/><text x="2.6884%" y="623.50"></text></g><g><title>&lt;topsnek::protocol::Direction as core::hash::Hash&gt;::hash (2 samples, 0.03%)</title><rect x="2.4384%" y="597" width="0.0259%" height="15" fill="rgb(229,81,49)" fg:x="188" fg:w="2"/><text x="2.6884%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (2 samples, 0.03%)</title><rect x="2.4384%" y="581" width="0.0259%" height="15" fill="rgb(236,28,36)" fg:x="188" fg:w="2"/><text x="2.6884%" y="591.50"></text></g><g><title>core::hash::Hasher::write_isize (2 samples, 0.03%)</title><rect x="2.4384%" y="565" width="0.0259%" height="15" fill="rgb(249,185,26)" fg:x="188" fg:w="2"/><text x="2.6884%" y="575.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.03%)</title><rect x="2.4384%" y="549" width="0.0259%" height="15" fill="rgb(249,174,33)" fg:x="188" fg:w="2"/><text x="2.6884%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.03%)</title><rect x="2.4384%" y="533" width="0.0259%" height="15" fill="rgb(233,201,37)" fg:x="188" fg:w="2"/><text x="2.6884%" y="543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.03%)</title><rect x="2.4384%" y="517" width="0.0259%" height="15" fill="rgb(221,78,26)" fg:x="188" fg:w="2"/><text x="2.6884%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.03%)</title><rect x="2.4384%" y="501" width="0.0259%" height="15" fill="rgb(250,127,30)" fg:x="188" fg:w="2"/><text x="2.6884%" y="511.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.03%)</title><rect x="2.4384%" y="485" width="0.0259%" height="15" fill="rgb(230,49,44)" fg:x="188" fg:w="2"/><text x="2.6884%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.03%)</title><rect x="2.5032%" y="469" width="0.0259%" height="15" fill="rgb(229,67,23)" fg:x="193" fg:w="2"/><text x="2.7532%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.03%)</title><rect x="2.5032%" y="453" width="0.0259%" height="15" fill="rgb(249,83,47)" fg:x="193" fg:w="2"/><text x="2.7532%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.03%)</title><rect x="2.5032%" y="437" width="0.0259%" height="15" fill="rgb(215,43,3)" fg:x="193" fg:w="2"/><text x="2.7532%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.01%)</title><rect x="2.5162%" y="421" width="0.0130%" height="15" fill="rgb(238,154,13)" fg:x="194" fg:w="1"/><text x="2.7662%" y="431.50"></text></g><g><title>hashbrown::map::make_insert_hash (5 samples, 0.06%)</title><rect x="2.5032%" y="501" width="0.0649%" height="15" fill="rgb(219,56,2)" fg:x="193" fg:w="5"/><text x="2.7532%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.06%)</title><rect x="2.5032%" y="485" width="0.0649%" height="15" fill="rgb(233,0,4)" fg:x="193" fg:w="5"/><text x="2.7532%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.04%)</title><rect x="2.5292%" y="469" width="0.0389%" height="15" fill="rgb(235,30,7)" fg:x="195" fg:w="3"/><text x="2.7792%" y="479.50"></text></g><g><title>&lt;topsnek::protocol::Direction as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="2.5292%" y="453" width="0.0389%" height="15" fill="rgb(250,79,13)" fg:x="195" fg:w="3"/><text x="2.7792%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (3 samples, 0.04%)</title><rect x="2.5292%" y="437" width="0.0389%" height="15" fill="rgb(211,146,34)" fg:x="195" fg:w="3"/><text x="2.7792%" y="447.50"></text></g><g><title>core::hash::Hasher::write_isize (3 samples, 0.04%)</title><rect x="2.5292%" y="421" width="0.0389%" height="15" fill="rgb(228,22,38)" fg:x="195" fg:w="3"/><text x="2.7792%" y="431.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.04%)</title><rect x="2.5292%" y="405" width="0.0389%" height="15" fill="rgb(235,168,5)" fg:x="195" fg:w="3"/><text x="2.7792%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="2.5292%" y="389" width="0.0389%" height="15" fill="rgb(221,155,16)" fg:x="195" fg:w="3"/><text x="2.7792%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="2.5292%" y="373" width="0.0389%" height="15" fill="rgb(215,215,53)" fg:x="195" fg:w="3"/><text x="2.7792%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.03%)</title><rect x="2.5422%" y="357" width="0.0259%" height="15" fill="rgb(223,4,10)" fg:x="196" fg:w="2"/><text x="2.7922%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (11 samples, 0.14%)</title><rect x="2.4643%" y="629" width="0.1427%" height="15" fill="rgb(234,103,6)" fg:x="190" fg:w="11"/><text x="2.7143%" y="639.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.14%)</title><rect x="2.4643%" y="613" width="0.1427%" height="15" fill="rgb(227,97,0)" fg:x="190" fg:w="11"/><text x="2.7143%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.14%)</title><rect x="2.4643%" y="597" width="0.1427%" height="15" fill="rgb(234,150,53)" fg:x="190" fg:w="11"/><text x="2.7143%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (11 samples, 0.14%)</title><rect x="2.4643%" y="581" width="0.1427%" height="15" fill="rgb(228,201,54)" fg:x="190" fg:w="11"/><text x="2.7143%" y="591.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (11 samples, 0.14%)</title><rect x="2.4643%" y="565" width="0.1427%" height="15" fill="rgb(222,22,37)" fg:x="190" fg:w="11"/><text x="2.7143%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (9 samples, 0.12%)</title><rect x="2.4903%" y="549" width="0.1167%" height="15" fill="rgb(237,53,32)" fg:x="192" fg:w="9"/><text x="2.7403%" y="559.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (9 samples, 0.12%)</title><rect x="2.4903%" y="533" width="0.1167%" height="15" fill="rgb(233,25,53)" fg:x="192" fg:w="9"/><text x="2.7403%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9 samples, 0.12%)</title><rect x="2.4903%" y="517" width="0.1167%" height="15" fill="rgb(210,40,34)" fg:x="192" fg:w="9"/><text x="2.7403%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.04%)</title><rect x="2.5681%" y="501" width="0.0389%" height="15" fill="rgb(241,220,44)" fg:x="198" fg:w="3"/><text x="2.8181%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (1 samples, 0.01%)</title><rect x="2.5940%" y="485" width="0.0130%" height="15" fill="rgb(235,28,35)" fg:x="200" fg:w="1"/><text x="2.8440%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V&gt; as core::convert::From&lt;[(K,V) (12 samples, 0.16%)</title><rect x="2.4643%" y="709" width="0.1556%" height="15" fill="rgb(210,56,17)" fg:x="190" fg:w="12"/><text x="2.7143%" y="719.50"></text></g><g><title> N]&gt;&gt;::from (12 samples, 0.16%)</title><rect x="2.4643%" y="693" width="0.1556%" height="15" fill="rgb(224,130,29)" fg:x="190" fg:w="12"/><text x="2.7143%" y="703.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (12 samples, 0.16%)</title><rect x="2.4643%" y="677" width="0.1556%" height="15" fill="rgb(235,212,8)" fg:x="190" fg:w="12"/><text x="2.7143%" y="687.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (12 samples, 0.16%)</title><rect x="2.4643%" y="661" width="0.1556%" height="15" fill="rgb(223,33,50)" fg:x="190" fg:w="12"/><text x="2.7143%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (12 samples, 0.16%)</title><rect x="2.4643%" y="645" width="0.1556%" height="15" fill="rgb(219,149,13)" fg:x="190" fg:w="12"/><text x="2.7143%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1 samples, 0.01%)</title><rect x="2.6070%" y="629" width="0.0130%" height="15" fill="rgb(250,156,29)" fg:x="201" fg:w="1"/><text x="2.8570%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.01%)</title><rect x="2.6070%" y="613" width="0.0130%" height="15" fill="rgb(216,193,19)" fg:x="201" fg:w="1"/><text x="2.8570%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.01%)</title><rect x="2.6070%" y="597" width="0.0130%" height="15" fill="rgb(216,135,14)" fg:x="201" fg:w="1"/><text x="2.8570%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.01%)</title><rect x="2.6070%" y="581" width="0.0130%" height="15" fill="rgb(241,47,5)" fg:x="201" fg:w="1"/><text x="2.8570%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1 samples, 0.01%)</title><rect x="2.6070%" y="565" width="0.0130%" height="15" fill="rgb(233,42,35)" fg:x="201" fg:w="1"/><text x="2.8570%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1 samples, 0.01%)</title><rect x="2.6070%" y="549" width="0.0130%" height="15" fill="rgb(231,13,6)" fg:x="201" fg:w="1"/><text x="2.8570%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.01%)</title><rect x="2.6070%" y="533" width="0.0130%" height="15" fill="rgb(207,181,40)" fg:x="201" fg:w="1"/><text x="2.8570%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (1 samples, 0.01%)</title><rect x="2.6070%" y="517" width="0.0130%" height="15" fill="rgb(254,173,49)" fg:x="201" fg:w="1"/><text x="2.8570%" y="527.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.01%)</title><rect x="2.6070%" y="501" width="0.0130%" height="15" fill="rgb(221,1,38)" fg:x="201" fg:w="1"/><text x="2.8570%" y="511.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (58 samples, 0.75%)</title><rect x="2.6200%" y="693" width="0.7523%" height="15" fill="rgb(206,124,46)" fg:x="202" fg:w="58"/><text x="2.8700%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (58 samples, 0.75%)</title><rect x="2.6200%" y="677" width="0.7523%" height="15" fill="rgb(249,21,11)" fg:x="202" fg:w="58"/><text x="2.8700%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_add (58 samples, 0.75%)</title><rect x="2.6200%" y="661" width="0.7523%" height="15" fill="rgb(222,201,40)" fg:x="202" fg:w="58"/><text x="2.8700%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.09%)</title><rect x="3.5409%" y="629" width="0.0908%" height="15" fill="rgb(235,61,29)" fg:x="273" fg:w="7"/><text x="3.7909%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.08%)</title><rect x="4.4228%" y="517" width="0.0778%" height="15" fill="rgb(219,207,3)" fg:x="341" fg:w="6"/><text x="4.6728%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.08%)</title><rect x="4.4228%" y="501" width="0.0778%" height="15" fill="rgb(222,56,46)" fg:x="341" fg:w="6"/><text x="4.6728%" y="511.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (73 samples, 0.95%)</title><rect x="4.2931%" y="597" width="0.9468%" height="15" fill="rgb(239,76,54)" fg:x="331" fg:w="73"/><text x="4.5431%" y="607.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as alloc::collections::vec_deque::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (73 samples, 0.95%)</title><rect x="4.2931%" y="581" width="0.9468%" height="15" fill="rgb(231,124,27)" fg:x="331" fg:w="73"/><text x="4.5431%" y="591.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::write_iter (63 samples, 0.82%)</title><rect x="4.4228%" y="565" width="0.8171%" height="15" fill="rgb(249,195,6)" fg:x="341" fg:w="63"/><text x="4.6728%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (63 samples, 0.82%)</title><rect x="4.4228%" y="549" width="0.8171%" height="15" fill="rgb(237,174,47)" fg:x="341" fg:w="63"/><text x="4.6728%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (63 samples, 0.82%)</title><rect x="4.4228%" y="533" width="0.8171%" height="15" fill="rgb(206,201,31)" fg:x="341" fg:w="63"/><text x="4.6728%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (57 samples, 0.74%)</title><rect x="4.5006%" y="517" width="0.7393%" height="15" fill="rgb(231,57,52)" fg:x="347" fg:w="57"/><text x="4.7506%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (57 samples, 0.74%)</title><rect x="4.5006%" y="501" width="0.7393%" height="15" fill="rgb(248,177,22)" fg:x="347" fg:w="57"/><text x="4.7506%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (57 samples, 0.74%)</title><rect x="4.5006%" y="485" width="0.7393%" height="15" fill="rgb(215,211,37)" fg:x="347" fg:w="57"/><text x="4.7506%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (57 samples, 0.74%)</title><rect x="4.5006%" y="469" width="0.7393%" height="15" fill="rgb(241,128,51)" fg:x="347" fg:w="57"/><text x="4.7506%" y="479.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (57 samples, 0.74%)</title><rect x="4.5006%" y="453" width="0.7393%" height="15" fill="rgb(227,165,31)" fg:x="347" fg:w="57"/><text x="4.7506%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (36 samples, 0.47%)</title><rect x="4.7730%" y="437" width="0.4669%" height="15" fill="rgb(228,167,24)" fg:x="368" fg:w="36"/><text x="5.0230%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (26 samples, 0.34%)</title><rect x="4.9027%" y="421" width="0.3372%" height="15" fill="rgb(228,143,12)" fg:x="378" fg:w="26"/><text x="5.1527%" y="431.50"></text></g><g><title>core::iter::adapters::cloned::clone_try_fold::{{closure}} (26 samples, 0.34%)</title><rect x="4.9027%" y="405" width="0.3372%" height="15" fill="rgb(249,149,8)" fg:x="378" fg:w="26"/><text x="5.1527%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (26 samples, 0.34%)</title><rect x="4.9027%" y="389" width="0.3372%" height="15" fill="rgb(243,35,44)" fg:x="378" fg:w="26"/><text x="5.1527%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::ok::{{closure}} (26 samples, 0.34%)</title><rect x="4.9027%" y="373" width="0.3372%" height="15" fill="rgb(246,89,9)" fg:x="378" fg:w="26"/><text x="5.1527%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (26 samples, 0.34%)</title><rect x="4.9027%" y="357" width="0.3372%" height="15" fill="rgb(233,213,13)" fg:x="378" fg:w="26"/><text x="5.1527%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (26 samples, 0.34%)</title><rect x="4.9027%" y="341" width="0.3372%" height="15" fill="rgb(233,141,41)" fg:x="378" fg:w="26"/><text x="5.1527%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::write_iter::{{closure}} (26 samples, 0.34%)</title><rect x="4.9027%" y="325" width="0.3372%" height="15" fill="rgb(239,167,4)" fg:x="378" fg:w="26"/><text x="5.1527%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (17 samples, 0.22%)</title><rect x="5.0195%" y="309" width="0.2205%" height="15" fill="rgb(209,217,16)" fg:x="387" fg:w="17"/><text x="5.2695%" y="319.50"></text></g><g><title>core::ptr::write (17 samples, 0.22%)</title><rect x="5.0195%" y="293" width="0.2205%" height="15" fill="rgb(219,88,35)" fg:x="387" fg:w="17"/><text x="5.2695%" y="303.50"></text></g><g><title>__rdl_alloc (3 samples, 0.04%)</title><rect x="5.5512%" y="501" width="0.0389%" height="15" fill="rgb(220,193,23)" fg:x="428" fg:w="3"/><text x="5.8012%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.04%)</title><rect x="5.5512%" y="485" width="0.0389%" height="15" fill="rgb(230,90,52)" fg:x="428" fg:w="3"/><text x="5.8012%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.22%)</title><rect x="5.4086%" y="581" width="0.2205%" height="15" fill="rgb(252,106,19)" fg:x="417" fg:w="17"/><text x="5.6586%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.22%)</title><rect x="5.4086%" y="565" width="0.2205%" height="15" fill="rgb(206,74,20)" fg:x="417" fg:w="17"/><text x="5.6586%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.21%)</title><rect x="5.4215%" y="549" width="0.2075%" height="15" fill="rgb(230,138,44)" fg:x="418" fg:w="16"/><text x="5.6715%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.21%)</title><rect x="5.4215%" y="533" width="0.2075%" height="15" fill="rgb(235,182,43)" fg:x="418" fg:w="16"/><text x="5.6715%" y="543.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.08%)</title><rect x="5.5512%" y="517" width="0.0778%" height="15" fill="rgb(242,16,51)" fg:x="428" fg:w="6"/><text x="5.8012%" y="527.50"></text></g><g><title>rust_oom (3 samples, 0.04%)</title><rect x="5.5901%" y="501" width="0.0389%" height="15" fill="rgb(248,9,4)" fg:x="431" fg:w="3"/><text x="5.8401%" y="511.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (115 samples, 1.49%)</title><rect x="4.2153%" y="613" width="1.4916%" height="15" fill="rgb(210,31,22)" fg:x="325" fg:w="115"/><text x="4.4653%" y="623.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::with_capacity_in (36 samples, 0.47%)</title><rect x="5.2399%" y="597" width="0.4669%" height="15" fill="rgb(239,54,39)" fg:x="404" fg:w="36"/><text x="5.4899%" y="607.50"></text></g><g><title>core::cmp::max (6 samples, 0.08%)</title><rect x="5.6291%" y="581" width="0.0778%" height="15" fill="rgb(230,99,41)" fg:x="434" fg:w="6"/><text x="5.8791%" y="591.50"></text></g><g><title>core::cmp::Ord::max (6 samples, 0.08%)</title><rect x="5.6291%" y="565" width="0.0778%" height="15" fill="rgb(253,106,12)" fg:x="434" fg:w="6"/><text x="5.8791%" y="575.50"></text></g><g><title>__rdl_alloc (2 samples, 0.03%)</title><rect x="6.5629%" y="437" width="0.0259%" height="15" fill="rgb(213,46,41)" fg:x="506" fg:w="2"/><text x="6.8129%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.03%)</title><rect x="6.5629%" y="421" width="0.0259%" height="15" fill="rgb(215,133,35)" fg:x="506" fg:w="2"/><text x="6.8129%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15 samples, 0.19%)</title><rect x="6.4073%" y="533" width="0.1946%" height="15" fill="rgb(213,28,5)" fg:x="494" fg:w="15"/><text x="6.6573%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.19%)</title><rect x="6.4073%" y="517" width="0.1946%" height="15" fill="rgb(215,77,49)" fg:x="494" fg:w="15"/><text x="6.6573%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.19%)</title><rect x="6.4073%" y="501" width="0.1946%" height="15" fill="rgb(248,100,22)" fg:x="494" fg:w="15"/><text x="6.6573%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.06%)</title><rect x="6.5370%" y="485" width="0.0649%" height="15" fill="rgb(208,67,9)" fg:x="504" fg:w="5"/><text x="6.7870%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.06%)</title><rect x="6.5370%" y="469" width="0.0649%" height="15" fill="rgb(219,133,21)" fg:x="504" fg:w="5"/><text x="6.7870%" y="479.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.06%)</title><rect x="6.5370%" y="453" width="0.0649%" height="15" fill="rgb(246,46,29)" fg:x="504" fg:w="5"/><text x="6.7870%" y="463.50"></text></g><g><title>rust_oom (1 samples, 0.01%)</title><rect x="6.5888%" y="437" width="0.0130%" height="15" fill="rgb(246,185,52)" fg:x="508" fg:w="1"/><text x="6.8388%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (87 samples, 1.13%)</title><rect x="5.7069%" y="613" width="1.1284%" height="15" fill="rgb(252,136,11)" fg:x="440" fg:w="87"/><text x="5.9569%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (45 samples, 0.58%)</title><rect x="6.2516%" y="597" width="0.5837%" height="15" fill="rgb(219,138,53)" fg:x="482" fg:w="45"/><text x="6.5016%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (45 samples, 0.58%)</title><rect x="6.2516%" y="581" width="0.5837%" height="15" fill="rgb(211,51,23)" fg:x="482" fg:w="45"/><text x="6.5016%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (45 samples, 0.58%)</title><rect x="6.2516%" y="565" width="0.5837%" height="15" fill="rgb(247,221,28)" fg:x="482" fg:w="45"/><text x="6.5016%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (45 samples, 0.58%)</title><rect x="6.2516%" y="549" width="0.5837%" height="15" fill="rgb(251,222,45)" fg:x="482" fg:w="45"/><text x="6.5016%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (18 samples, 0.23%)</title><rect x="6.6018%" y="533" width="0.2335%" height="15" fill="rgb(217,162,53)" fg:x="509" fg:w="18"/><text x="6.8518%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.23%)</title><rect x="6.6018%" y="517" width="0.2335%" height="15" fill="rgb(229,93,14)" fg:x="509" fg:w="18"/><text x="6.8518%" y="527.50"></text></g><g><title>__rdl_alloc (9 samples, 0.12%)</title><rect x="7.2244%" y="421" width="0.1167%" height="15" fill="rgb(209,67,49)" fg:x="557" fg:w="9"/><text x="7.4744%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.05%)</title><rect x="7.2892%" y="405" width="0.0519%" height="15" fill="rgb(213,87,29)" fg:x="562" fg:w="4"/><text x="7.5392%" y="415.50"></text></g><g><title>&lt;topsnek::protocol::Snake as core::clone::Clone&gt;::clone (289 samples, 3.75%)</title><rect x="3.6316%" y="629" width="3.7484%" height="15" fill="rgb(205,151,52)" fg:x="280" fg:w="289"/><text x="3.8816%" y="639.50">&lt;top..</text></g><g><title>&lt;topsnek::protocol::Customizations as core::clone::Clone&gt;::clone (42 samples, 0.54%)</title><rect x="6.8353%" y="613" width="0.5447%" height="15" fill="rgb(253,215,39)" fg:x="527" fg:w="42"/><text x="7.0853%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (25 samples, 0.32%)</title><rect x="7.0558%" y="597" width="0.3243%" height="15" fill="rgb(221,220,41)" fg:x="544" fg:w="25"/><text x="7.3058%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (25 samples, 0.32%)</title><rect x="7.0558%" y="581" width="0.3243%" height="15" fill="rgb(218,133,21)" fg:x="544" fg:w="25"/><text x="7.3058%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (25 samples, 0.32%)</title><rect x="7.0558%" y="565" width="0.3243%" height="15" fill="rgb(221,193,43)" fg:x="544" fg:w="25"/><text x="7.3058%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (25 samples, 0.32%)</title><rect x="7.0558%" y="549" width="0.3243%" height="15" fill="rgb(240,128,52)" fg:x="544" fg:w="25"/><text x="7.3058%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (25 samples, 0.32%)</title><rect x="7.0558%" y="533" width="0.3243%" height="15" fill="rgb(253,114,12)" fg:x="544" fg:w="25"/><text x="7.3058%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (25 samples, 0.32%)</title><rect x="7.0558%" y="517" width="0.3243%" height="15" fill="rgb(215,223,47)" fg:x="544" fg:w="25"/><text x="7.3058%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (25 samples, 0.32%)</title><rect x="7.0558%" y="501" width="0.3243%" height="15" fill="rgb(248,225,23)" fg:x="544" fg:w="25"/><text x="7.3058%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (25 samples, 0.32%)</title><rect x="7.0558%" y="485" width="0.3243%" height="15" fill="rgb(250,108,0)" fg:x="544" fg:w="25"/><text x="7.3058%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (25 samples, 0.32%)</title><rect x="7.0558%" y="469" width="0.3243%" height="15" fill="rgb(228,208,7)" fg:x="544" fg:w="25"/><text x="7.3058%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (25 samples, 0.32%)</title><rect x="7.0558%" y="453" width="0.3243%" height="15" fill="rgb(244,45,10)" fg:x="544" fg:w="25"/><text x="7.3058%" y="463.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.32%)</title><rect x="7.0558%" y="437" width="0.3243%" height="15" fill="rgb(207,125,25)" fg:x="544" fg:w="25"/><text x="7.3058%" y="447.50"></text></g><g><title>rust_oom (3 samples, 0.04%)</title><rect x="7.3411%" y="421" width="0.0389%" height="15" fill="rgb(210,195,18)" fg:x="566" fg:w="3"/><text x="7.5911%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="7.3800%" y="629" width="0.0259%" height="15" fill="rgb(249,80,12)" fg:x="569" fg:w="2"/><text x="7.6300%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="7.3800%" y="613" width="0.0259%" height="15" fill="rgb(221,65,9)" fg:x="569" fg:w="2"/><text x="7.6300%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.03%)</title><rect x="7.3800%" y="597" width="0.0259%" height="15" fill="rgb(235,49,36)" fg:x="569" fg:w="2"/><text x="7.6300%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.03%)</title><rect x="7.3800%" y="581" width="0.0259%" height="15" fill="rgb(225,32,20)" fg:x="569" fg:w="2"/><text x="7.6300%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="7.3800%" y="565" width="0.0259%" height="15" fill="rgb(215,141,46)" fg:x="569" fg:w="2"/><text x="7.6300%" y="575.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.03%)</title><rect x="7.3800%" y="549" width="0.0259%" height="15" fill="rgb(250,160,47)" fg:x="569" fg:w="2"/><text x="7.6300%" y="559.50"></text></g><g><title>__rdl_alloc (2 samples, 0.03%)</title><rect x="7.3800%" y="533" width="0.0259%" height="15" fill="rgb(216,222,40)" fg:x="569" fg:w="2"/><text x="7.6300%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="7.3930%" y="517" width="0.0130%" height="15" fill="rgb(234,217,39)" fg:x="570" fg:w="1"/><text x="7.6430%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (322 samples, 4.18%)</title><rect x="3.3722%" y="693" width="4.1764%" height="15" fill="rgb(207,178,40)" fg:x="260" fg:w="322"/><text x="3.6222%" y="703.50">&lt;allo..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (318 samples, 4.12%)</title><rect x="3.4241%" y="677" width="4.1245%" height="15" fill="rgb(221,136,13)" fg:x="264" fg:w="318"/><text x="3.6741%" y="687.50">allo..</text></g><g><title>alloc::slice::hack::to_vec (318 samples, 4.12%)</title><rect x="3.4241%" y="661" width="4.1245%" height="15" fill="rgb(249,199,10)" fg:x="264" fg:w="318"/><text x="3.6741%" y="671.50">allo..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (318 samples, 4.12%)</title><rect x="3.4241%" y="645" width="4.1245%" height="15" fill="rgb(249,222,13)" fg:x="264" fg:w="318"/><text x="3.6741%" y="655.50">&lt;T a..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (11 samples, 0.14%)</title><rect x="7.4060%" y="629" width="0.1427%" height="15" fill="rgb(244,185,38)" fg:x="571" fg:w="11"/><text x="7.6560%" y="639.50"></text></g><g><title>&lt;topsnek::logic::board::Board as core::clone::Clone&gt;::clone (35 samples, 0.45%)</title><rect x="7.5486%" y="693" width="0.4540%" height="15" fill="rgb(236,202,9)" fg:x="582" fg:w="35"/><text x="7.7986%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (35 samples, 0.45%)</title><rect x="7.5486%" y="677" width="0.4540%" height="15" fill="rgb(250,229,37)" fg:x="582" fg:w="35"/><text x="7.7986%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.06%)</title><rect x="7.9377%" y="661" width="0.0649%" height="15" fill="rgb(206,174,23)" fg:x="612" fg:w="5"/><text x="8.1877%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.06%)</title><rect x="7.9377%" y="645" width="0.0649%" height="15" fill="rgb(211,33,43)" fg:x="612" fg:w="5"/><text x="8.1877%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.06%)</title><rect x="7.9377%" y="629" width="0.0649%" height="15" fill="rgb(245,58,50)" fg:x="612" fg:w="5"/><text x="8.1877%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.06%)</title><rect x="7.9377%" y="613" width="0.0649%" height="15" fill="rgb(244,68,36)" fg:x="612" fg:w="5"/><text x="8.1877%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.06%)</title><rect x="7.9377%" y="597" width="0.0649%" height="15" fill="rgb(232,229,15)" fg:x="612" fg:w="5"/><text x="8.1877%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.06%)</title><rect x="7.9377%" y="581" width="0.0649%" height="15" fill="rgb(254,30,23)" fg:x="612" fg:w="5"/><text x="8.1877%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.06%)</title><rect x="7.9377%" y="565" width="0.0649%" height="15" fill="rgb(235,160,14)" fg:x="612" fg:w="5"/><text x="8.1877%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.06%)</title><rect x="7.9377%" y="549" width="0.0649%" height="15" fill="rgb(212,155,44)" fg:x="612" fg:w="5"/><text x="8.1877%" y="559.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.06%)</title><rect x="7.9377%" y="533" width="0.0649%" height="15" fill="rgb(226,2,50)" fg:x="612" fg:w="5"/><text x="8.1877%" y="543.50"></text></g><g><title>rust_oom (3 samples, 0.04%)</title><rect x="7.9637%" y="517" width="0.0389%" height="15" fill="rgb(234,177,6)" fg:x="614" fg:w="3"/><text x="8.2137%" y="527.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::write_iter (39 samples, 0.51%)</title><rect x="8.1193%" y="629" width="0.5058%" height="15" fill="rgb(217,24,9)" fg:x="626" fg:w="39"/><text x="8.3693%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (39 samples, 0.51%)</title><rect x="8.1193%" y="613" width="0.5058%" height="15" fill="rgb(220,13,46)" fg:x="626" fg:w="39"/><text x="8.3693%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (39 samples, 0.51%)</title><rect x="8.1193%" y="597" width="0.5058%" height="15" fill="rgb(239,221,27)" fg:x="626" fg:w="39"/><text x="8.3693%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (39 samples, 0.51%)</title><rect x="8.1193%" y="581" width="0.5058%" height="15" fill="rgb(222,198,25)" fg:x="626" fg:w="39"/><text x="8.3693%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (39 samples, 0.51%)</title><rect x="8.1193%" y="565" width="0.5058%" height="15" fill="rgb(211,99,13)" fg:x="626" fg:w="39"/><text x="8.3693%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (39 samples, 0.51%)</title><rect x="8.1193%" y="549" width="0.5058%" height="15" fill="rgb(232,111,31)" fg:x="626" fg:w="39"/><text x="8.3693%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (39 samples, 0.51%)</title><rect x="8.1193%" y="533" width="0.5058%" height="15" fill="rgb(245,82,37)" fg:x="626" fg:w="39"/><text x="8.3693%" y="543.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (22 samples, 0.29%)</title><rect x="8.3398%" y="517" width="0.2853%" height="15" fill="rgb(227,149,46)" fg:x="643" fg:w="22"/><text x="8.5898%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (20 samples, 0.26%)</title><rect x="8.3658%" y="501" width="0.2594%" height="15" fill="rgb(218,36,50)" fg:x="645" fg:w="20"/><text x="8.6158%" y="511.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (18 samples, 0.23%)</title><rect x="8.3917%" y="485" width="0.2335%" height="15" fill="rgb(226,80,48)" fg:x="647" fg:w="18"/><text x="8.6417%" y="495.50"></text></g><g><title>core::iter::adapters::cloned::clone_try_fold::{{closure}} (14 samples, 0.18%)</title><rect x="8.4436%" y="469" width="0.1816%" height="15" fill="rgb(238,224,15)" fg:x="651" fg:w="14"/><text x="8.6936%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (14 samples, 0.18%)</title><rect x="8.4436%" y="453" width="0.1816%" height="15" fill="rgb(241,136,10)" fg:x="651" fg:w="14"/><text x="8.6936%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::ok::{{closure}} (14 samples, 0.18%)</title><rect x="8.4436%" y="437" width="0.1816%" height="15" fill="rgb(208,32,45)" fg:x="651" fg:w="14"/><text x="8.6936%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (14 samples, 0.18%)</title><rect x="8.4436%" y="421" width="0.1816%" height="15" fill="rgb(207,135,9)" fg:x="651" fg:w="14"/><text x="8.6936%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (11 samples, 0.14%)</title><rect x="8.4825%" y="405" width="0.1427%" height="15" fill="rgb(206,86,44)" fg:x="654" fg:w="11"/><text x="8.7325%" y="415.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::write_iter::{{closure}} (11 samples, 0.14%)</title><rect x="8.4825%" y="389" width="0.1427%" height="15" fill="rgb(245,177,15)" fg:x="654" fg:w="11"/><text x="8.7325%" y="399.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (11 samples, 0.14%)</title><rect x="8.4825%" y="373" width="0.1427%" height="15" fill="rgb(206,64,50)" fg:x="654" fg:w="11"/><text x="8.7325%" y="383.50"></text></g><g><title>core::ptr::write (11 samples, 0.14%)</title><rect x="8.4825%" y="357" width="0.1427%" height="15" fill="rgb(234,36,40)" fg:x="654" fg:w="11"/><text x="8.7325%" y="367.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (40 samples, 0.52%)</title><rect x="8.1193%" y="661" width="0.5188%" height="15" fill="rgb(213,64,8)" fg:x="626" fg:w="40"/><text x="8.3693%" y="671.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as alloc::collections::vec_deque::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (40 samples, 0.52%)</title><rect x="8.1193%" y="645" width="0.5188%" height="15" fill="rgb(210,75,36)" fg:x="626" fg:w="40"/><text x="8.3693%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as alloc::collections::vec_deque::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend::WrapAddOnDrop&lt;topsnek::protocol::Point,alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="8.6252%" y="629" width="0.0130%" height="15" fill="rgb(229,88,21)" fg:x="665" fg:w="1"/><text x="8.8752%" y="639.50"></text></g><g><title>&lt;&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as alloc::collections::vec_deque::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend::WrapAddOnDrop&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="8.6252%" y="613" width="0.0130%" height="15" fill="rgb(252,204,47)" fg:x="665" fg:w="1"/><text x="8.8752%" y="623.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (1 samples, 0.01%)</title><rect x="8.6252%" y="597" width="0.0130%" height="15" fill="rgb(208,77,27)" fg:x="665" fg:w="1"/><text x="8.8752%" y="607.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (1 samples, 0.01%)</title><rect x="8.6252%" y="581" width="0.0130%" height="15" fill="rgb(221,76,26)" fg:x="665" fg:w="1"/><text x="8.8752%" y="591.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (48 samples, 0.62%)</title><rect x="8.0285%" y="677" width="0.6226%" height="15" fill="rgb(225,139,18)" fg:x="619" fg:w="48"/><text x="8.2785%" y="687.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="8.6381%" y="661" width="0.0130%" height="15" fill="rgb(230,137,11)" fg:x="666" fg:w="1"/><text x="8.8881%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="8.6381%" y="645" width="0.0130%" height="15" fill="rgb(212,28,1)" fg:x="666" fg:w="1"/><text x="8.8881%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="8.6381%" y="629" width="0.0130%" height="15" fill="rgb(248,164,17)" fg:x="666" fg:w="1"/><text x="8.8881%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="8.6381%" y="613" width="0.0130%" height="15" fill="rgb(222,171,42)" fg:x="666" fg:w="1"/><text x="8.8881%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="8.6381%" y="597" width="0.0130%" height="15" fill="rgb(243,84,45)" fg:x="666" fg:w="1"/><text x="8.8881%" y="607.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="8.6381%" y="581" width="0.0130%" height="15" fill="rgb(252,49,23)" fg:x="666" fg:w="1"/><text x="8.8881%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.14%)</title><rect x="8.8457%" y="597" width="0.1427%" height="15" fill="rgb(215,19,7)" fg:x="682" fg:w="11"/><text x="9.0957%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.14%)</title><rect x="8.8457%" y="581" width="0.1427%" height="15" fill="rgb(238,81,41)" fg:x="682" fg:w="11"/><text x="9.0957%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.14%)</title><rect x="8.8457%" y="565" width="0.1427%" height="15" fill="rgb(210,199,37)" fg:x="682" fg:w="11"/><text x="9.0957%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.05%)</title><rect x="8.9364%" y="549" width="0.0519%" height="15" fill="rgb(244,192,49)" fg:x="689" fg:w="4"/><text x="9.1864%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.05%)</title><rect x="8.9364%" y="533" width="0.0519%" height="15" fill="rgb(226,211,11)" fg:x="689" fg:w="4"/><text x="9.1864%" y="543.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.05%)</title><rect x="8.9364%" y="517" width="0.0519%" height="15" fill="rgb(236,162,54)" fg:x="689" fg:w="4"/><text x="9.1864%" y="527.50"></text></g><g><title>rust_oom (1 samples, 0.01%)</title><rect x="8.9754%" y="501" width="0.0130%" height="15" fill="rgb(220,229,9)" fg:x="692" fg:w="1"/><text x="9.2254%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (33 samples, 0.43%)</title><rect x="8.6511%" y="677" width="0.4280%" height="15" fill="rgb(250,87,22)" fg:x="667" fg:w="33"/><text x="8.9011%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (20 samples, 0.26%)</title><rect x="8.8197%" y="661" width="0.2594%" height="15" fill="rgb(239,43,17)" fg:x="680" fg:w="20"/><text x="9.0697%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (20 samples, 0.26%)</title><rect x="8.8197%" y="645" width="0.2594%" height="15" fill="rgb(231,177,25)" fg:x="680" fg:w="20"/><text x="9.0697%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (20 samples, 0.26%)</title><rect x="8.8197%" y="629" width="0.2594%" height="15" fill="rgb(219,179,1)" fg:x="680" fg:w="20"/><text x="9.0697%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (20 samples, 0.26%)</title><rect x="8.8197%" y="613" width="0.2594%" height="15" fill="rgb(238,219,53)" fg:x="680" fg:w="20"/><text x="9.0697%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (7 samples, 0.09%)</title><rect x="8.9883%" y="597" width="0.0908%" height="15" fill="rgb(232,167,36)" fg:x="693" fg:w="7"/><text x="9.2383%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.09%)</title><rect x="8.9883%" y="581" width="0.0908%" height="15" fill="rgb(244,19,51)" fg:x="693" fg:w="7"/><text x="9.2383%" y="591.50"></text></g><g><title>__rdl_alloc (2 samples, 0.03%)</title><rect x="9.6109%" y="485" width="0.0259%" height="15" fill="rgb(224,6,22)" fg:x="741" fg:w="2"/><text x="9.8609%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.03%)</title><rect x="9.6109%" y="469" width="0.0259%" height="15" fill="rgb(224,145,5)" fg:x="741" fg:w="2"/><text x="9.8609%" y="479.50"></text></g><g><title>&lt;topsnek::logic::game::Game as core::clone::Clone&gt;::clone (543 samples, 7.04%)</title><rect x="2.6200%" y="709" width="7.0428%" height="15" fill="rgb(234,130,49)" fg:x="202" fg:w="543"/><text x="2.8700%" y="719.50">&lt;topsnek:..</text></g><g><title>&lt;topsnek::protocol::Snake as core::clone::Clone&gt;::clone (128 samples, 1.66%)</title><rect x="8.0026%" y="693" width="1.6602%" height="15" fill="rgb(254,6,2)" fg:x="617" fg:w="128"/><text x="8.2526%" y="703.50"></text></g><g><title>&lt;topsnek::protocol::Customizations as core::clone::Clone&gt;::clone (45 samples, 0.58%)</title><rect x="9.0791%" y="677" width="0.5837%" height="15" fill="rgb(208,96,46)" fg:x="700" fg:w="45"/><text x="9.3291%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8 samples, 0.10%)</title><rect x="9.5590%" y="661" width="0.1038%" height="15" fill="rgb(239,3,39)" fg:x="737" fg:w="8"/><text x="9.8090%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.05%)</title><rect x="9.6109%" y="645" width="0.0519%" height="15" fill="rgb(233,210,1)" fg:x="741" fg:w="4"/><text x="9.8609%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.05%)</title><rect x="9.6109%" y="629" width="0.0519%" height="15" fill="rgb(244,137,37)" fg:x="741" fg:w="4"/><text x="9.8609%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.05%)</title><rect x="9.6109%" y="613" width="0.0519%" height="15" fill="rgb(240,136,2)" fg:x="741" fg:w="4"/><text x="9.8609%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.05%)</title><rect x="9.6109%" y="597" width="0.0519%" height="15" fill="rgb(239,18,37)" fg:x="741" fg:w="4"/><text x="9.8609%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.05%)</title><rect x="9.6109%" y="581" width="0.0519%" height="15" fill="rgb(218,185,22)" fg:x="741" fg:w="4"/><text x="9.8609%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.05%)</title><rect x="9.6109%" y="565" width="0.0519%" height="15" fill="rgb(225,218,4)" fg:x="741" fg:w="4"/><text x="9.8609%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.05%)</title><rect x="9.6109%" y="549" width="0.0519%" height="15" fill="rgb(230,182,32)" fg:x="741" fg:w="4"/><text x="9.8609%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.05%)</title><rect x="9.6109%" y="533" width="0.0519%" height="15" fill="rgb(242,56,43)" fg:x="741" fg:w="4"/><text x="9.8609%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.05%)</title><rect x="9.6109%" y="517" width="0.0519%" height="15" fill="rgb(233,99,24)" fg:x="741" fg:w="4"/><text x="9.8609%" y="527.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.05%)</title><rect x="9.6109%" y="501" width="0.0519%" height="15" fill="rgb(234,209,42)" fg:x="741" fg:w="4"/><text x="9.8609%" y="511.50"></text></g><g><title>rust_oom (2 samples, 0.03%)</title><rect x="9.6368%" y="485" width="0.0259%" height="15" fill="rgb(227,7,12)" fg:x="743" fg:w="2"/><text x="9.8868%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.03%)</title><rect x="9.6628%" y="661" width="0.0259%" height="15" fill="rgb(245,203,43)" fg:x="745" fg:w="2"/><text x="9.9128%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.01%)</title><rect x="9.6887%" y="661" width="0.0130%" height="15" fill="rgb(238,205,33)" fg:x="747" fg:w="1"/><text x="9.9387%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.04%)</title><rect x="9.7147%" y="645" width="0.0389%" height="15" fill="rgb(231,56,7)" fg:x="749" fg:w="3"/><text x="9.9647%" y="655.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.04%)</title><rect x="9.7147%" y="629" width="0.0389%" height="15" fill="rgb(244,186,29)" fg:x="749" fg:w="3"/><text x="9.9647%" y="639.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.04%)</title><rect x="9.7147%" y="613" width="0.0389%" height="15" fill="rgb(234,111,31)" fg:x="749" fg:w="3"/><text x="9.9647%" y="623.50"></text></g><g><title>__rdl_realloc (2 samples, 0.03%)</title><rect x="9.7276%" y="597" width="0.0259%" height="15" fill="rgb(241,149,10)" fg:x="750" fg:w="2"/><text x="9.9776%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.01%)</title><rect x="9.7406%" y="581" width="0.0130%" height="15" fill="rgb(249,206,44)" fg:x="751" fg:w="1"/><text x="9.9906%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.06%)</title><rect x="9.7017%" y="661" width="0.0649%" height="15" fill="rgb(251,153,30)" fg:x="748" fg:w="5"/><text x="9.9517%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.01%)</title><rect x="9.7536%" y="645" width="0.0130%" height="15" fill="rgb(239,152,38)" fg:x="752" fg:w="1"/><text x="10.0036%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (10 samples, 0.13%)</title><rect x="9.6628%" y="709" width="0.1297%" height="15" fill="rgb(249,139,47)" fg:x="745" fg:w="10"/><text x="9.9128%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.13%)</title><rect x="9.6628%" y="693" width="0.1297%" height="15" fill="rgb(244,64,35)" fg:x="745" fg:w="10"/><text x="9.9128%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 0.13%)</title><rect x="9.6628%" y="677" width="0.1297%" height="15" fill="rgb(216,46,15)" fg:x="745" fg:w="10"/><text x="9.9128%" y="687.50"></text></g><g><title>core::cmp::max (2 samples, 0.03%)</title><rect x="9.7665%" y="661" width="0.0259%" height="15" fill="rgb(250,74,19)" fg:x="753" fg:w="2"/><text x="10.0165%" y="671.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.03%)</title><rect x="9.7665%" y="645" width="0.0259%" height="15" fill="rgb(249,42,33)" fg:x="753" fg:w="2"/><text x="10.0165%" y="655.50"></text></g><g><title>core::array::&lt;impl [T (1 samples, 0.01%)</title><rect x="9.7925%" y="709" width="0.0130%" height="15" fill="rgb(242,149,17)" fg:x="755" fg:w="1"/><text x="10.0425%" y="719.50"></text></g><g><title> N]&gt;::map (1 samples, 0.01%)</title><rect x="9.7925%" y="693" width="0.0130%" height="15" fill="rgb(244,29,21)" fg:x="755" fg:w="1"/><text x="10.0425%" y="703.50"></text></g><g><title>core::array::collect_into_array_unchecked (1 samples, 0.01%)</title><rect x="9.7925%" y="677" width="0.0130%" height="15" fill="rgb(220,130,37)" fg:x="755" fg:w="1"/><text x="10.0425%" y="687.50"></text></g><g><title>core::array::try_collect_into_array_unchecked (1 samples, 0.01%)</title><rect x="9.7925%" y="661" width="0.0130%" height="15" fill="rgb(211,67,2)" fg:x="755" fg:w="1"/><text x="10.0425%" y="671.50"></text></g><g><title>core::array::try_collect_into_array (1 samples, 0.01%)</title><rect x="9.7925%" y="645" width="0.0130%" height="15" fill="rgb(235,68,52)" fg:x="755" fg:w="1"/><text x="10.0425%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="9.7925%" y="629" width="0.0130%" height="15" fill="rgb(246,142,3)" fg:x="755" fg:w="1"/><text x="10.0425%" y="639.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="9.7925%" y="613" width="0.0130%" height="15" fill="rgb(241,25,7)" fg:x="755" fg:w="1"/><text x="10.0425%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="9.7925%" y="597" width="0.0130%" height="15" fill="rgb(242,119,39)" fg:x="755" fg:w="1"/><text x="10.0425%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.01%)</title><rect x="9.7925%" y="581" width="0.0130%" height="15" fill="rgb(241,98,45)" fg:x="755" fg:w="1"/><text x="10.0425%" y="591.50"></text></g><g><title>&lt;topsnek::logic::scoring::VoronoiScore as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.01%)</title><rect x="9.8314%" y="677" width="0.0130%" height="15" fill="rgb(254,28,30)" fg:x="758" fg:w="1"/><text x="10.0814%" y="687.50"></text></g><g><title>core::cmp::PartialOrd::lt (6 samples, 0.08%)</title><rect x="9.8054%" y="709" width="0.0778%" height="15" fill="rgb(241,142,54)" fg:x="756" fg:w="6"/><text x="10.0554%" y="719.50"></text></g><g><title>&lt;topsnek::logic::scoring::TournamentVoronoiScore as core::cmp::PartialOrd&gt;::partial_cmp (6 samples, 0.08%)</title><rect x="9.8054%" y="693" width="0.0778%" height="15" fill="rgb(222,85,15)" fg:x="756" fg:w="6"/><text x="10.0554%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::partial_cmp (3 samples, 0.04%)</title><rect x="9.8444%" y="677" width="0.0389%" height="15" fill="rgb(210,85,47)" fg:x="759" fg:w="3"/><text x="10.0944%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (3 samples, 0.04%)</title><rect x="9.8444%" y="661" width="0.0389%" height="15" fill="rgb(224,206,25)" fg:x="759" fg:w="3"/><text x="10.0944%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;topsnek::protocol::Ruleset&gt;&gt; (1 samples, 0.01%)</title><rect x="9.8833%" y="693" width="0.0130%" height="15" fill="rgb(243,201,19)" fg:x="762" fg:w="1"/><text x="10.1333%" y="703.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="9.8833%" y="677" width="0.0130%" height="15" fill="rgb(236,59,4)" fg:x="762" fg:w="1"/><text x="10.1333%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="9.8833%" y="661" width="0.0130%" height="15" fill="rgb(254,179,45)" fg:x="762" fg:w="1"/><text x="10.1333%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="9.8833%" y="645" width="0.0130%" height="15" fill="rgb(226,14,10)" fg:x="762" fg:w="1"/><text x="10.1333%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;topsnek::protocol::Snake&gt;&gt; (1 samples, 0.01%)</title><rect x="9.8962%" y="693" width="0.0130%" height="15" fill="rgb(244,27,41)" fg:x="763" fg:w="1"/><text x="10.1462%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="9.8962%" y="677" width="0.0130%" height="15" fill="rgb(235,35,32)" fg:x="763" fg:w="1"/><text x="10.1462%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;[topsnek::protocol::Snake]&gt; (1 samples, 0.01%)</title><rect x="9.8962%" y="661" width="0.0130%" height="15" fill="rgb(218,68,31)" fg:x="763" fg:w="1"/><text x="10.1462%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;topsnek::protocol::Snake&gt; (1 samples, 0.01%)</title><rect x="9.8962%" y="645" width="0.0130%" height="15" fill="rgb(207,120,37)" fg:x="763" fg:w="1"/><text x="10.1462%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.01%)</title><rect x="9.8962%" y="629" width="0.0130%" height="15" fill="rgb(227,98,0)" fg:x="763" fg:w="1"/><text x="10.1462%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="9.8962%" y="613" width="0.0130%" height="15" fill="rgb(207,7,3)" fg:x="763" fg:w="1"/><text x="10.1462%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="9.8962%" y="597" width="0.0130%" height="15" fill="rgb(206,98,19)" fg:x="763" fg:w="1"/><text x="10.1462%" y="607.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="9.8962%" y="581" width="0.0130%" height="15" fill="rgb(217,5,26)" fg:x="763" fg:w="1"/><text x="10.1462%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;topsnek::logic::game::Game&gt; (4 samples, 0.05%)</title><rect x="9.8833%" y="709" width="0.0519%" height="15" fill="rgb(235,190,38)" fg:x="762" fg:w="4"/><text x="10.1333%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;topsnek::protocol::Snake&gt; (2 samples, 0.03%)</title><rect x="9.9092%" y="693" width="0.0259%" height="15" fill="rgb(247,86,24)" fg:x="764" fg:w="2"/><text x="10.1592%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.03%)</title><rect x="9.9092%" y="677" width="0.0259%" height="15" fill="rgb(205,101,16)" fg:x="764" fg:w="2"/><text x="10.1592%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.03%)</title><rect x="9.9092%" y="661" width="0.0259%" height="15" fill="rgb(246,168,33)" fg:x="764" fg:w="2"/><text x="10.1592%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.03%)</title><rect x="9.9092%" y="645" width="0.0259%" height="15" fill="rgb(231,114,1)" fg:x="764" fg:w="2"/><text x="10.1592%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="9.9092%" y="629" width="0.0259%" height="15" fill="rgb(207,184,53)" fg:x="764" fg:w="2"/><text x="10.1592%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.03%)</title><rect x="9.9092%" y="613" width="0.0259%" height="15" fill="rgb(224,95,51)" fg:x="764" fg:w="2"/><text x="10.1592%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.03%)</title><rect x="9.9092%" y="597" width="0.0259%" height="15" fill="rgb(212,188,45)" fg:x="764" fg:w="2"/><text x="10.1592%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (39 samples, 0.51%)</title><rect x="9.9351%" y="709" width="0.5058%" height="15" fill="rgb(223,154,38)" fg:x="766" fg:w="39"/><text x="10.1851%" y="719.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (39 samples, 0.51%)</title><rect x="9.9351%" y="693" width="0.5058%" height="15" fill="rgb(251,22,52)" fg:x="766" fg:w="39"/><text x="10.1851%" y="703.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (13 samples, 0.17%)</title><rect x="10.5966%" y="565" width="0.1686%" height="15" fill="rgb(229,209,22)" fg:x="817" fg:w="13"/><text x="10.8466%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (25 samples, 0.32%)</title><rect x="10.5966%" y="581" width="0.3243%" height="15" fill="rgb(234,138,34)" fg:x="817" fg:w="25"/><text x="10.8466%" y="591.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (12 samples, 0.16%)</title><rect x="10.7652%" y="565" width="0.1556%" height="15" fill="rgb(212,95,11)" fg:x="830" fg:w="12"/><text x="11.0152%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (33 samples, 0.43%)</title><rect x="10.5966%" y="629" width="0.4280%" height="15" fill="rgb(240,179,47)" fg:x="817" fg:w="33"/><text x="10.8466%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (33 samples, 0.43%)</title><rect x="10.5966%" y="613" width="0.4280%" height="15" fill="rgb(240,163,11)" fg:x="817" fg:w="33"/><text x="10.8466%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (33 samples, 0.43%)</title><rect x="10.5966%" y="597" width="0.4280%" height="15" fill="rgb(236,37,12)" fg:x="817" fg:w="33"/><text x="10.8466%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8 samples, 0.10%)</title><rect x="10.9209%" y="581" width="0.1038%" height="15" fill="rgb(232,164,16)" fg:x="842" fg:w="8"/><text x="11.1709%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (50 samples, 0.65%)</title><rect x="10.4410%" y="661" width="0.6485%" height="15" fill="rgb(244,205,15)" fg:x="805" fg:w="50"/><text x="10.6910%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (48 samples, 0.62%)</title><rect x="10.4669%" y="645" width="0.6226%" height="15" fill="rgb(223,117,47)" fg:x="807" fg:w="48"/><text x="10.7169%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.06%)</title><rect x="11.0246%" y="629" width="0.0649%" height="15" fill="rgb(244,107,35)" fg:x="850" fg:w="5"/><text x="11.2746%" y="639.50"></text></g><g><title>&lt;topsnek::protocol::Direction as core::hash::Hash&gt;::hash (5 samples, 0.06%)</title><rect x="11.0246%" y="613" width="0.0649%" height="15" fill="rgb(205,140,8)" fg:x="850" fg:w="5"/><text x="11.2746%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (5 samples, 0.06%)</title><rect x="11.0246%" y="597" width="0.0649%" height="15" fill="rgb(228,84,46)" fg:x="850" fg:w="5"/><text x="11.2746%" y="607.50"></text></g><g><title>core::hash::Hasher::write_isize (5 samples, 0.06%)</title><rect x="11.0246%" y="581" width="0.0649%" height="15" fill="rgb(254,188,9)" fg:x="850" fg:w="5"/><text x="11.2746%" y="591.50"></text></g><g><title>core::hash::Hasher::write_usize (5 samples, 0.06%)</title><rect x="11.0246%" y="565" width="0.0649%" height="15" fill="rgb(206,112,54)" fg:x="850" fg:w="5"/><text x="11.2746%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.06%)</title><rect x="11.0246%" y="549" width="0.0649%" height="15" fill="rgb(216,84,49)" fg:x="850" fg:w="5"/><text x="11.2746%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.06%)</title><rect x="11.0246%" y="533" width="0.0649%" height="15" fill="rgb(214,194,35)" fg:x="850" fg:w="5"/><text x="11.2746%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.06%)</title><rect x="11.0246%" y="517" width="0.0649%" height="15" fill="rgb(249,28,3)" fg:x="850" fg:w="5"/><text x="11.2746%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.06%)</title><rect x="11.0246%" y="501" width="0.0649%" height="15" fill="rgb(222,56,52)" fg:x="850" fg:w="5"/><text x="11.2746%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.06%)</title><rect x="11.0246%" y="485" width="0.0649%" height="15" fill="rgb(245,217,50)" fg:x="850" fg:w="5"/><text x="11.2746%" y="495.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (75 samples, 0.97%)</title><rect x="10.4410%" y="709" width="0.9728%" height="15" fill="rgb(213,201,24)" fg:x="805" fg:w="75"/><text x="10.6910%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (75 samples, 0.97%)</title><rect x="10.4410%" y="693" width="0.9728%" height="15" fill="rgb(248,116,28)" fg:x="805" fg:w="75"/><text x="10.6910%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (75 samples, 0.97%)</title><rect x="10.4410%" y="677" width="0.9728%" height="15" fill="rgb(219,72,43)" fg:x="805" fg:w="75"/><text x="10.6910%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (25 samples, 0.32%)</title><rect x="11.0895%" y="661" width="0.3243%" height="15" fill="rgb(209,138,14)" fg:x="855" fg:w="25"/><text x="11.3395%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (25 samples, 0.32%)</title><rect x="11.0895%" y="645" width="0.3243%" height="15" fill="rgb(222,18,33)" fg:x="855" fg:w="25"/><text x="11.3395%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (25 samples, 0.32%)</title><rect x="11.0895%" y="629" width="0.3243%" height="15" fill="rgb(213,199,7)" fg:x="855" fg:w="25"/><text x="11.3395%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (13 samples, 0.17%)</title><rect x="11.4137%" y="645" width="0.1686%" height="15" fill="rgb(250,110,10)" fg:x="880" fg:w="13"/><text x="11.6637%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (13 samples, 0.17%)</title><rect x="11.4137%" y="629" width="0.1686%" height="15" fill="rgb(248,123,6)" fg:x="880" fg:w="13"/><text x="11.6637%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (13 samples, 0.17%)</title><rect x="11.4137%" y="613" width="0.1686%" height="15" fill="rgb(206,91,31)" fg:x="880" fg:w="13"/><text x="11.6637%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.06%)</title><rect x="11.5175%" y="597" width="0.0649%" height="15" fill="rgb(211,154,13)" fg:x="888" fg:w="5"/><text x="11.7675%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.04%)</title><rect x="11.8158%" y="517" width="0.0389%" height="15" fill="rgb(225,148,7)" fg:x="911" fg:w="3"/><text x="12.0658%" y="527.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (40 samples, 0.52%)</title><rect x="11.4137%" y="709" width="0.5188%" height="15" fill="rgb(220,160,43)" fg:x="880" fg:w="40"/><text x="11.6637%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (40 samples, 0.52%)</title><rect x="11.4137%" y="693" width="0.5188%" height="15" fill="rgb(213,52,39)" fg:x="880" fg:w="40"/><text x="11.6637%" y="703.50"></text></g><g><title>hashbrown::map::make_insert_hash (40 samples, 0.52%)</title><rect x="11.4137%" y="677" width="0.5188%" height="15" fill="rgb(243,137,7)" fg:x="880" fg:w="40"/><text x="11.6637%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (40 samples, 0.52%)</title><rect x="11.4137%" y="661" width="0.5188%" height="15" fill="rgb(230,79,13)" fg:x="880" fg:w="40"/><text x="11.6637%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (27 samples, 0.35%)</title><rect x="11.5824%" y="645" width="0.3502%" height="15" fill="rgb(247,105,23)" fg:x="893" fg:w="27"/><text x="11.8324%" y="655.50"></text></g><g><title>&lt;topsnek::protocol::Direction as core::hash::Hash&gt;::hash (27 samples, 0.35%)</title><rect x="11.5824%" y="629" width="0.3502%" height="15" fill="rgb(223,179,41)" fg:x="893" fg:w="27"/><text x="11.8324%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (27 samples, 0.35%)</title><rect x="11.5824%" y="613" width="0.3502%" height="15" fill="rgb(218,9,34)" fg:x="893" fg:w="27"/><text x="11.8324%" y="623.50"></text></g><g><title>core::hash::Hasher::write_isize (27 samples, 0.35%)</title><rect x="11.5824%" y="597" width="0.3502%" height="15" fill="rgb(222,106,8)" fg:x="893" fg:w="27"/><text x="11.8324%" y="607.50"></text></g><g><title>core::hash::Hasher::write_usize (27 samples, 0.35%)</title><rect x="11.5824%" y="581" width="0.3502%" height="15" fill="rgb(211,220,0)" fg:x="893" fg:w="27"/><text x="11.8324%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (27 samples, 0.35%)</title><rect x="11.5824%" y="565" width="0.3502%" height="15" fill="rgb(229,52,16)" fg:x="893" fg:w="27"/><text x="11.8324%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (27 samples, 0.35%)</title><rect x="11.5824%" y="549" width="0.3502%" height="15" fill="rgb(212,155,18)" fg:x="893" fg:w="27"/><text x="11.8324%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (26 samples, 0.34%)</title><rect x="11.5953%" y="533" width="0.3372%" height="15" fill="rgb(242,21,14)" fg:x="894" fg:w="26"/><text x="11.8453%" y="543.50"></text></g><g><title>core::hash::sip::u8to64_le (6 samples, 0.08%)</title><rect x="11.8547%" y="517" width="0.0778%" height="15" fill="rgb(222,19,48)" fg:x="914" fg:w="6"/><text x="12.1047%" y="527.50"></text></g><g><title>__rdl_alloc (3 samples, 0.04%)</title><rect x="12.4125%" y="517" width="0.0389%" height="15" fill="rgb(232,45,27)" fg:x="957" fg:w="3"/><text x="12.6625%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.03%)</title><rect x="12.4254%" y="501" width="0.0259%" height="15" fill="rgb(249,103,42)" fg:x="958" fg:w="2"/><text x="12.6754%" y="511.50"></text></g><g><title>&lt;topsnek::logic::board::Board as core::clone::Clone&gt;::clone (11 samples, 0.14%)</title><rect x="12.3346%" y="693" width="0.1427%" height="15" fill="rgb(246,81,33)" fg:x="951" fg:w="11"/><text x="12.5846%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.14%)</title><rect x="12.3346%" y="677" width="0.1427%" height="15" fill="rgb(252,33,42)" fg:x="951" fg:w="11"/><text x="12.5846%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (11 samples, 0.14%)</title><rect x="12.3346%" y="661" width="0.1427%" height="15" fill="rgb(209,212,41)" fg:x="951" fg:w="11"/><text x="12.5846%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (11 samples, 0.14%)</title><rect x="12.3346%" y="645" width="0.1427%" height="15" fill="rgb(207,154,6)" fg:x="951" fg:w="11"/><text x="12.5846%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (11 samples, 0.14%)</title><rect x="12.3346%" y="629" width="0.1427%" height="15" fill="rgb(223,64,47)" fg:x="951" fg:w="11"/><text x="12.5846%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.14%)</title><rect x="12.3346%" y="613" width="0.1427%" height="15" fill="rgb(211,161,38)" fg:x="951" fg:w="11"/><text x="12.5846%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.06%)</title><rect x="12.4125%" y="597" width="0.0649%" height="15" fill="rgb(219,138,40)" fg:x="957" fg:w="5"/><text x="12.6625%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.06%)</title><rect x="12.4125%" y="581" width="0.0649%" height="15" fill="rgb(241,228,46)" fg:x="957" fg:w="5"/><text x="12.6625%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.06%)</title><rect x="12.4125%" y="565" width="0.0649%" height="15" fill="rgb(223,209,38)" fg:x="957" fg:w="5"/><text x="12.6625%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.06%)</title><rect x="12.4125%" y="549" width="0.0649%" height="15" fill="rgb(236,164,45)" fg:x="957" fg:w="5"/><text x="12.6625%" y="559.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.06%)</title><rect x="12.4125%" y="533" width="0.0649%" height="15" fill="rgb(231,15,5)" fg:x="957" fg:w="5"/><text x="12.6625%" y="543.50"></text></g><g><title>rust_oom (2 samples, 0.03%)</title><rect x="12.4514%" y="517" width="0.0259%" height="15" fill="rgb(252,35,15)" fg:x="960" fg:w="2"/><text x="12.7014%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.01%)</title><rect x="12.5811%" y="645" width="0.0130%" height="15" fill="rgb(248,181,18)" fg:x="970" fg:w="1"/><text x="12.8311%" y="655.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="12.6200%" y="629" width="0.0130%" height="15" fill="rgb(233,39,42)" fg:x="973" fg:w="1"/><text x="12.8700%" y="639.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="12.6200%" y="613" width="0.0130%" height="15" fill="rgb(238,110,33)" fg:x="973" fg:w="1"/><text x="12.8700%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.09%)</title><rect x="12.5551%" y="677" width="0.0908%" height="15" fill="rgb(233,195,10)" fg:x="968" fg:w="7"/><text x="12.8051%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 0.08%)</title><rect x="12.5681%" y="661" width="0.0778%" height="15" fill="rgb(254,105,3)" fg:x="969" fg:w="6"/><text x="12.8181%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.05%)</title><rect x="12.5940%" y="645" width="0.0519%" height="15" fill="rgb(221,225,9)" fg:x="971" fg:w="4"/><text x="12.8440%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.01%)</title><rect x="12.6329%" y="629" width="0.0130%" height="15" fill="rgb(224,227,45)" fg:x="974" fg:w="1"/><text x="12.8829%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (17 samples, 0.22%)</title><rect x="12.4773%" y="693" width="0.2205%" height="15" fill="rgb(229,198,43)" fg:x="962" fg:w="17"/><text x="12.7273%" y="703.50"></text></g><g><title>core::ptr::write (4 samples, 0.05%)</title><rect x="12.6459%" y="677" width="0.0519%" height="15" fill="rgb(206,209,35)" fg:x="975" fg:w="4"/><text x="12.8959%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (6 samples, 0.08%)</title><rect x="12.6978%" y="693" width="0.0778%" height="15" fill="rgb(245,195,53)" fg:x="979" fg:w="6"/><text x="12.9478%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (6 samples, 0.08%)</title><rect x="12.6978%" y="677" width="0.0778%" height="15" fill="rgb(240,92,26)" fg:x="979" fg:w="6"/><text x="12.9478%" y="687.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.08%)</title><rect x="12.6978%" y="661" width="0.0778%" height="15" fill="rgb(207,40,23)" fg:x="979" fg:w="6"/><text x="12.9478%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.08%)</title><rect x="12.6978%" y="645" width="0.0778%" height="15" fill="rgb(223,111,35)" fg:x="979" fg:w="6"/><text x="12.9478%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.08%)</title><rect x="12.6978%" y="629" width="0.0778%" height="15" fill="rgb(229,147,28)" fg:x="979" fg:w="6"/><text x="12.9478%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;topsnek::logic::board::Board&gt; (2 samples, 0.03%)</title><rect x="12.7756%" y="693" width="0.0259%" height="15" fill="rgb(211,29,28)" fg:x="985" fg:w="2"/><text x="13.0256%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.03%)</title><rect x="12.7756%" y="677" width="0.0259%" height="15" fill="rgb(228,72,33)" fg:x="985" fg:w="2"/><text x="13.0256%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.03%)</title><rect x="12.7756%" y="661" width="0.0259%" height="15" fill="rgb(205,214,31)" fg:x="985" fg:w="2"/><text x="13.0256%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="12.7756%" y="645" width="0.0259%" height="15" fill="rgb(224,111,15)" fg:x="985" fg:w="2"/><text x="13.0256%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.03%)</title><rect x="12.7756%" y="629" width="0.0259%" height="15" fill="rgb(253,21,26)" fg:x="985" fg:w="2"/><text x="13.0256%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.03%)</title><rect x="12.7756%" y="613" width="0.0259%" height="15" fill="rgb(245,139,43)" fg:x="985" fg:w="2"/><text x="13.0256%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::ne (3 samples, 0.04%)</title><rect x="13.2815%" y="677" width="0.0389%" height="15" fill="rgb(252,170,7)" fg:x="1024" fg:w="3"/><text x="13.5315%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (3 samples, 0.04%)</title><rect x="13.2815%" y="661" width="0.0389%" height="15" fill="rgb(231,118,14)" fg:x="1024" fg:w="3"/><text x="13.5315%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="13.3204%" y="677" width="0.0389%" height="15" fill="rgb(238,83,0)" fg:x="1027" fg:w="3"/><text x="13.5704%" y="687.50"></text></g><g><title>topsnek::logic::game::Game::death_by_collission (57 samples, 0.74%)</title><rect x="12.8016%" y="693" width="0.7393%" height="15" fill="rgb(221,39,39)" fg:x="987" fg:w="57"/><text x="13.0516%" y="703.50"></text></g><g><title>topsnek::logic::board::Board::get (14 samples, 0.18%)</title><rect x="13.3593%" y="677" width="0.1816%" height="15" fill="rgb(222,119,46)" fg:x="1030" fg:w="14"/><text x="13.6093%" y="687.50"></text></g><g><title>topsnek::logic::board::Board::width (6 samples, 0.08%)</title><rect x="13.4630%" y="661" width="0.0778%" height="15" fill="rgb(222,165,49)" fg:x="1038" fg:w="6"/><text x="13.7130%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.03%)</title><rect x="13.5149%" y="645" width="0.0259%" height="15" fill="rgb(219,113,52)" fg:x="1042" fg:w="2"/><text x="13.7649%" y="655.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.03%)</title><rect x="13.5149%" y="629" width="0.0259%" height="15" fill="rgb(214,7,15)" fg:x="1042" fg:w="2"/><text x="13.7649%" y="639.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.03%)</title><rect x="13.5149%" y="613" width="0.0259%" height="15" fill="rgb(235,32,4)" fg:x="1042" fg:w="2"/><text x="13.7649%" y="623.50"></text></g><g><title>topsnek::logic::game::Game::draw_heads (42 samples, 0.54%)</title><rect x="13.5409%" y="693" width="0.5447%" height="15" fill="rgb(238,90,54)" fg:x="1044" fg:w="42"/><text x="13.7909%" y="703.50"></text></g><g><title>topsnek::logic::board::Board::add (32 samples, 0.42%)</title><rect x="13.6706%" y="677" width="0.4150%" height="15" fill="rgb(213,208,19)" fg:x="1054" fg:w="32"/><text x="13.9206%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.08%)</title><rect x="14.4358%" y="597" width="0.0778%" height="15" fill="rgb(233,156,4)" fg:x="1113" fg:w="6"/><text x="14.6858%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="14.5006%" y="581" width="0.0130%" height="15" fill="rgb(207,194,5)" fg:x="1118" fg:w="1"/><text x="14.7506%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.01%)</title><rect x="14.5006%" y="565" width="0.0130%" height="15" fill="rgb(206,111,30)" fg:x="1118" fg:w="1"/><text x="14.7506%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.01%)</title><rect x="14.5006%" y="549" width="0.0130%" height="15" fill="rgb(243,70,54)" fg:x="1118" fg:w="1"/><text x="14.7506%" y="559.50"></text></g><g><title>topsnek::logic::snake::&lt;impl topsnek::protocol::Snake&gt;::dead (4 samples, 0.05%)</title><rect x="14.5136%" y="597" width="0.0519%" height="15" fill="rgb(242,28,8)" fg:x="1119" fg:w="4"/><text x="14.7636%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (14 samples, 0.18%)</title><rect x="14.4358%" y="629" width="0.1816%" height="15" fill="rgb(219,106,18)" fg:x="1113" fg:w="14"/><text x="14.6858%" y="639.50"></text></g><g><title>topsnek::logic::game::Game::eliminate_dead_snakes::{{closure}} (14 samples, 0.18%)</title><rect x="14.4358%" y="613" width="0.1816%" height="15" fill="rgb(244,222,10)" fg:x="1113" fg:w="14"/><text x="14.6858%" y="623.50"></text></g><g><title>topsnek::logic::snake::&lt;impl topsnek::protocol::Snake&gt;::remove_from_board (4 samples, 0.05%)</title><rect x="14.5655%" y="597" width="0.0519%" height="15" fill="rgb(236,179,52)" fg:x="1123" fg:w="4"/><text x="14.8155%" y="607.50"></text></g><g><title>topsnek::logic::board::Board::clear_snake (4 samples, 0.05%)</title><rect x="14.5655%" y="581" width="0.0519%" height="15" fill="rgb(213,23,39)" fg:x="1123" fg:w="4"/><text x="14.8155%" y="591.50"></text></g><g><title>topsnek::logic::board::Board::add (4 samples, 0.05%)</title><rect x="14.5655%" y="565" width="0.0519%" height="15" fill="rgb(238,48,10)" fg:x="1123" fg:w="4"/><text x="14.8155%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.01%)</title><rect x="14.6304%" y="613" width="0.0130%" height="15" fill="rgb(251,196,23)" fg:x="1128" fg:w="1"/><text x="14.8804%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="14.6304%" y="597" width="0.0130%" height="15" fill="rgb(250,152,24)" fg:x="1128" fg:w="1"/><text x="14.8804%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="14.6304%" y="581" width="0.0130%" height="15" fill="rgb(209,150,17)" fg:x="1128" fg:w="1"/><text x="14.8804%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="14.6304%" y="565" width="0.0130%" height="15" fill="rgb(234,202,34)" fg:x="1128" fg:w="1"/><text x="14.8804%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="14.6304%" y="549" width="0.0130%" height="15" fill="rgb(253,148,53)" fg:x="1128" fg:w="1"/><text x="14.8804%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="14.6304%" y="533" width="0.0130%" height="15" fill="rgb(218,129,16)" fg:x="1128" fg:w="1"/><text x="14.8804%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (33 samples, 0.43%)</title><rect x="14.2283%" y="677" width="0.4280%" height="15" fill="rgb(216,85,19)" fg:x="1097" fg:w="33"/><text x="14.4783%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (25 samples, 0.32%)</title><rect x="14.3320%" y="661" width="0.3243%" height="15" fill="rgb(235,228,7)" fg:x="1105" fg:w="25"/><text x="14.5820%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (17 samples, 0.22%)</title><rect x="14.4358%" y="645" width="0.2205%" height="15" fill="rgb(245,175,0)" fg:x="1113" fg:w="17"/><text x="14.6858%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;topsnek::protocol::Snake&gt; (3 samples, 0.04%)</title><rect x="14.6174%" y="629" width="0.0389%" height="15" fill="rgb(208,168,36)" fg:x="1127" fg:w="3"/><text x="14.8674%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;topsnek::protocol::Customizations&gt; (1 samples, 0.01%)</title><rect x="14.6433%" y="613" width="0.0130%" height="15" fill="rgb(246,171,24)" fg:x="1129" fg:w="1"/><text x="14.8933%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.01%)</title><rect x="14.6433%" y="597" width="0.0130%" height="15" fill="rgb(215,142,24)" fg:x="1129" fg:w="1"/><text x="14.8933%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="14.6433%" y="581" width="0.0130%" height="15" fill="rgb(250,187,7)" fg:x="1129" fg:w="1"/><text x="14.8933%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="14.6433%" y="565" width="0.0130%" height="15" fill="rgb(228,66,33)" fg:x="1129" fg:w="1"/><text x="14.8933%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="14.6433%" y="549" width="0.0130%" height="15" fill="rgb(234,215,21)" fg:x="1129" fg:w="1"/><text x="14.8933%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="14.6433%" y="533" width="0.0130%" height="15" fill="rgb(222,191,20)" fg:x="1129" fg:w="1"/><text x="14.8933%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="14.6433%" y="517" width="0.0130%" height="15" fill="rgb(245,79,54)" fg:x="1129" fg:w="1"/><text x="14.8933%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;topsnek::protocol::Point&gt;&gt; (6 samples, 0.08%)</title><rect x="14.6563%" y="677" width="0.0778%" height="15" fill="rgb(240,10,37)" fg:x="1130" fg:w="6"/><text x="14.9063%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;topsnek::protocol::Point&gt;&gt; (6 samples, 0.08%)</title><rect x="14.6563%" y="661" width="0.0778%" height="15" fill="rgb(214,192,32)" fg:x="1130" fg:w="6"/><text x="14.9063%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.08%)</title><rect x="14.6563%" y="645" width="0.0778%" height="15" fill="rgb(209,36,54)" fg:x="1130" fg:w="6"/><text x="14.9063%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.03%)</title><rect x="14.7082%" y="629" width="0.0259%" height="15" fill="rgb(220,10,11)" fg:x="1134" fg:w="2"/><text x="14.9582%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.03%)</title><rect x="14.7082%" y="613" width="0.0259%" height="15" fill="rgb(221,106,17)" fg:x="1134" fg:w="2"/><text x="14.9582%" y="623.50"></text></g><g><title>topsnek::logic::game::Game::eliminate_dead_snakes (53 samples, 0.69%)</title><rect x="14.0856%" y="693" width="0.6874%" height="15" fill="rgb(251,142,44)" fg:x="1086" fg:w="53"/><text x="14.3356%" y="703.50"></text></g><g><title>topsnek::logic::game::Game::repair_crash_sites (3 samples, 0.04%)</title><rect x="14.7341%" y="677" width="0.0389%" height="15" fill="rgb(238,13,15)" fg:x="1136" fg:w="3"/><text x="14.9841%" y="687.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::handle_capacity_increase (3 samples, 0.04%)</title><rect x="15.5123%" y="645" width="0.0389%" height="15" fill="rgb(208,107,27)" fg:x="1196" fg:w="3"/><text x="15.7623%" y="655.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.05%)</title><rect x="15.5901%" y="597" width="0.0519%" height="15" fill="rgb(205,136,37)" fg:x="1202" fg:w="4"/><text x="15.8401%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.04%)</title><rect x="15.6420%" y="597" width="0.0389%" height="15" fill="rgb(250,205,27)" fg:x="1206" fg:w="3"/><text x="15.8920%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (19 samples, 0.25%)</title><rect x="15.6809%" y="581" width="0.2464%" height="15" fill="rgb(210,80,43)" fg:x="1209" fg:w="19"/><text x="15.9309%" y="591.50"></text></g><g><title>alloc::alloc::Global::grow_impl (19 samples, 0.25%)</title><rect x="15.6809%" y="565" width="0.2464%" height="15" fill="rgb(247,160,36)" fg:x="1209" fg:w="19"/><text x="15.9309%" y="575.50"></text></g><g><title>alloc::alloc::realloc (19 samples, 0.25%)</title><rect x="15.6809%" y="549" width="0.2464%" height="15" fill="rgb(234,13,49)" fg:x="1209" fg:w="19"/><text x="15.9309%" y="559.50"></text></g><g><title>__rdl_realloc (11 samples, 0.14%)</title><rect x="15.7847%" y="533" width="0.1427%" height="15" fill="rgb(234,122,0)" fg:x="1217" fg:w="11"/><text x="16.0347%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (10 samples, 0.13%)</title><rect x="15.7977%" y="517" width="0.1297%" height="15" fill="rgb(207,146,38)" fg:x="1218" fg:w="10"/><text x="16.0477%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (27 samples, 0.35%)</title><rect x="15.6809%" y="597" width="0.3502%" height="15" fill="rgb(207,177,25)" fg:x="1209" fg:w="27"/><text x="15.9309%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (8 samples, 0.10%)</title><rect x="15.9274%" y="581" width="0.1038%" height="15" fill="rgb(211,178,42)" fg:x="1228" fg:w="8"/><text x="16.1774%" y="591.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_front (60 samples, 0.78%)</title><rect x="15.2918%" y="677" width="0.7782%" height="15" fill="rgb(230,69,54)" fg:x="1179" fg:w="60"/><text x="15.5418%" y="687.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (46 samples, 0.60%)</title><rect x="15.4734%" y="661" width="0.5966%" height="15" fill="rgb(214,135,41)" fg:x="1193" fg:w="46"/><text x="15.7234%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (40 samples, 0.52%)</title><rect x="15.5512%" y="645" width="0.5188%" height="15" fill="rgb(237,67,25)" fg:x="1199" fg:w="40"/><text x="15.8012%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (40 samples, 0.52%)</title><rect x="15.5512%" y="629" width="0.5188%" height="15" fill="rgb(222,189,50)" fg:x="1199" fg:w="40"/><text x="15.8012%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (40 samples, 0.52%)</title><rect x="15.5512%" y="613" width="0.5188%" height="15" fill="rgb(245,148,34)" fg:x="1199" fg:w="40"/><text x="15.8012%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (3 samples, 0.04%)</title><rect x="16.0311%" y="597" width="0.0389%" height="15" fill="rgb(222,29,6)" fg:x="1236" fg:w="3"/><text x="16.2811%" y="607.50"></text></g><g><title>topsnek::logic::Tile::is_hazard (14 samples, 0.18%)</title><rect x="16.0700%" y="677" width="0.1816%" height="15" fill="rgb(221,189,43)" fg:x="1239" fg:w="14"/><text x="16.3200%" y="687.50"></text></g><g><title>topsnek::logic::board::Board::add (35 samples, 0.45%)</title><rect x="16.2516%" y="677" width="0.4540%" height="15" fill="rgb(207,36,27)" fg:x="1253" fg:w="35"/><text x="16.5016%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.06%)</title><rect x="16.6407%" y="661" width="0.0649%" height="15" fill="rgb(217,90,24)" fg:x="1283" fg:w="5"/><text x="16.8907%" y="671.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.06%)</title><rect x="16.6407%" y="645" width="0.0649%" height="15" fill="rgb(224,66,35)" fg:x="1283" fg:w="5"/><text x="16.8907%" y="655.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.06%)</title><rect x="16.6407%" y="629" width="0.0649%" height="15" fill="rgb(221,13,50)" fg:x="1283" fg:w="5"/><text x="16.8907%" y="639.50"></text></g><g><title>topsnek::logic::board::Board::clear_snake (14 samples, 0.18%)</title><rect x="16.7056%" y="677" width="0.1816%" height="15" fill="rgb(236,68,49)" fg:x="1288" fg:w="14"/><text x="16.9556%" y="687.50"></text></g><g><title>topsnek::logic::board::Board::add (14 samples, 0.18%)</title><rect x="16.7056%" y="661" width="0.1816%" height="15" fill="rgb(229,146,28)" fg:x="1288" fg:w="14"/><text x="16.9556%" y="671.50"></text></g><g><title>topsnek::logic::board::Board::get (40 samples, 0.52%)</title><rect x="16.8872%" y="677" width="0.5188%" height="15" fill="rgb(225,31,38)" fg:x="1302" fg:w="40"/><text x="17.1372%" y="687.50"></text></g><g><title>topsnek::logic::point::&lt;impl topsnek::protocol::Point&gt;::neighbour (20 samples, 0.26%)</title><rect x="17.4060%" y="677" width="0.2594%" height="15" fill="rgb(250,208,3)" fg:x="1342" fg:w="20"/><text x="17.6560%" y="687.50"></text></g><g><title>topsnek::logic::game::Game::execute_moves (457 samples, 5.93%)</title><rect x="11.9326%" y="709" width="5.9274%" height="15" fill="rgb(246,54,23)" fg:x="920" fg:w="457"/><text x="12.1826%" y="719.50">topsnek:..</text></g><g><title>topsnek::logic::snake::&lt;impl topsnek::protocol::Snake&gt;::apply_move (238 samples, 3.09%)</title><rect x="14.7730%" y="693" width="3.0869%" height="15" fill="rgb(243,76,11)" fg:x="1139" fg:w="238"/><text x="15.0230%" y="703.50">top..</text></g><g><title>topsnek::logic::point::&lt;impl topsnek::protocol::Point&gt;::warp (15 samples, 0.19%)</title><rect x="17.6654%" y="677" width="0.1946%" height="15" fill="rgb(245,21,50)" fg:x="1362" fg:w="15"/><text x="17.9154%" y="687.50"></text></g><g><title>topsnek::logic::game::Game::warp (1 samples, 0.01%)</title><rect x="17.8599%" y="709" width="0.0130%" height="15" fill="rgb(228,9,43)" fg:x="1377" fg:w="1"/><text x="18.1099%" y="719.50"></text></g><g><title>topsnek::logic::point::&lt;impl topsnek::protocol::Point&gt;::neighbour (3 samples, 0.04%)</title><rect x="17.8729%" y="709" width="0.0389%" height="15" fill="rgb(208,100,47)" fg:x="1378" fg:w="3"/><text x="18.1229%" y="719.50"></text></g><g><title>alloc::alloc::box_free (3 samples, 0.04%)</title><rect x="17.9896%" y="677" width="0.0389%" height="15" fill="rgb(232,26,8)" fg:x="1387" fg:w="3"/><text x="18.2396%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.04%)</title><rect x="17.9896%" y="661" width="0.0389%" height="15" fill="rgb(216,166,38)" fg:x="1387" fg:w="3"/><text x="18.2396%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.04%)</title><rect x="17.9896%" y="645" width="0.0389%" height="15" fill="rgb(251,202,51)" fg:x="1387" fg:w="3"/><text x="18.2396%" y="655.50"></text></g><g><title>topsnek::logic::scoring::kills (1 samples, 0.01%)</title><rect x="18.0285%" y="677" width="0.0130%" height="15" fill="rgb(254,216,34)" fg:x="1390" fg:w="1"/><text x="18.2785%" y="687.50"></text></g><g><title>core::array::iter::&lt;impl core::iter::traits::collect::IntoIterator for [T (552 samples, 7.16%)</title><rect x="32.7237%" y="661" width="7.1595%" height="15" fill="rgb(251,32,27)" fg:x="2523" fg:w="552"/><text x="32.9737%" y="671.50">core::arra..</text></g><g><title> N]&gt;::into_iter (552 samples, 7.16%)</title><rect x="32.7237%" y="645" width="7.1595%" height="15" fill="rgb(208,127,28)" fg:x="2523" fg:w="552"/><text x="32.9737%" y="655.50"> N]&gt;::into..</text></g><g><title>core::mem::transmute_copy (552 samples, 7.16%)</title><rect x="32.7237%" y="629" width="7.1595%" height="15" fill="rgb(224,137,22)" fg:x="2523" fg:w="552"/><text x="32.9737%" y="639.50">core::mem:..</text></g><g><title>core::ptr::read (552 samples, 7.16%)</title><rect x="32.7237%" y="613" width="7.1595%" height="15" fill="rgb(254,70,32)" fg:x="2523" fg:w="552"/><text x="32.9737%" y="623.50">core::ptr:..</text></g><g><title>topsnek::logic::board::Board::get (1,190 samples, 15.43%)</title><rect x="39.8833%" y="661" width="15.4345%" height="15" fill="rgb(229,75,37)" fg:x="3075" fg:w="1190"/><text x="40.1333%" y="671.50">topsnek::logic::board::B..</text></g><g><title>topsnek::logic::board::Board::width (613 samples, 7.95%)</title><rect x="47.3671%" y="645" width="7.9507%" height="15" fill="rgb(252,64,23)" fg:x="3652" fg:w="613"/><text x="47.6171%" y="655.50">topsnek::lo..</text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (370 samples, 4.80%)</title><rect x="60.0259%" y="517" width="4.7990%" height="15" fill="rgb(232,162,48)" fg:x="4628" fg:w="370"/><text x="60.2759%" y="527.50">&lt;core:..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (370 samples, 4.80%)</title><rect x="60.0259%" y="501" width="4.7990%" height="15" fill="rgb(246,160,12)" fg:x="4628" fg:w="370"/><text x="60.2759%" y="511.50">core::..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (370 samples, 4.80%)</title><rect x="60.0259%" y="485" width="4.7990%" height="15" fill="rgb(247,166,0)" fg:x="4628" fg:w="370"/><text x="60.2759%" y="495.50">&lt;core:..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (257 samples, 3.33%)</title><rect x="61.4916%" y="469" width="3.3333%" height="15" fill="rgb(249,219,21)" fg:x="4741" fg:w="257"/><text x="61.7416%" y="479.50">&lt;us..</text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (257 samples, 3.33%)</title><rect x="61.4916%" y="453" width="3.3333%" height="15" fill="rgb(205,209,3)" fg:x="4741" fg:w="257"/><text x="61.7416%" y="463.50">cor..</text></g><g><title>core::array::collect_into_array_unchecked (1,103 samples, 14.31%)</title><rect x="55.5512%" y="613" width="14.3061%" height="15" fill="rgb(243,44,1)" fg:x="4283" fg:w="1103"/><text x="55.8012%" y="623.50">core::array::collect_i..</text></g><g><title>core::array::try_collect_into_array_unchecked (758 samples, 9.83%)</title><rect x="60.0259%" y="597" width="9.8314%" height="15" fill="rgb(206,159,16)" fg:x="4628" fg:w="758"/><text x="60.2759%" y="607.50">core::array::t..</text></g><g><title>core::array::try_collect_into_array (758 samples, 9.83%)</title><rect x="60.0259%" y="581" width="9.8314%" height="15" fill="rgb(244,77,30)" fg:x="4628" fg:w="758"/><text x="60.2759%" y="591.50">core::array::t..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (758 samples, 9.83%)</title><rect x="60.0259%" y="565" width="9.8314%" height="15" fill="rgb(218,69,12)" fg:x="4628" fg:w="758"/><text x="60.2759%" y="575.50">&lt;core::iter::a..</text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (758 samples, 9.83%)</title><rect x="60.0259%" y="549" width="9.8314%" height="15" fill="rgb(212,87,7)" fg:x="4628" fg:w="758"/><text x="60.2759%" y="559.50">&lt;&amp;mut I as cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (758 samples, 9.83%)</title><rect x="60.0259%" y="533" width="9.8314%" height="15" fill="rgb(245,114,25)" fg:x="4628" fg:w="758"/><text x="60.2759%" y="543.50">&lt;core::iter::a..</text></g><g><title>core::option::Option&lt;T&gt;::map (388 samples, 5.03%)</title><rect x="64.8249%" y="517" width="5.0324%" height="15" fill="rgb(210,61,42)" fg:x="4998" fg:w="388"/><text x="65.0749%" y="527.50">core::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (374 samples, 4.85%)</title><rect x="65.0065%" y="501" width="4.8508%" height="15" fill="rgb(211,52,33)" fg:x="5012" fg:w="374"/><text x="65.2565%" y="511.50">core::..</text></g><g><title>topsnek::logic::point::&lt;impl topsnek::protocol::Point&gt;::neighbours::{{closure}} (374 samples, 4.85%)</title><rect x="65.0065%" y="485" width="4.8508%" height="15" fill="rgb(234,58,33)" fg:x="5012" fg:w="374"/><text x="65.2565%" y="495.50">topsne..</text></g><g><title>topsnek::logic::point::&lt;impl topsnek::protocol::Point&gt;::neighbour (309 samples, 4.01%)</title><rect x="65.8495%" y="469" width="4.0078%" height="15" fill="rgb(220,115,36)" fg:x="5077" fg:w="309"/><text x="66.0995%" y="479.50">tops..</text></g><g><title>topsnek::logic::point::&lt;impl topsnek::protocol::Point&gt;::neighbours (1,735 samples, 22.50%)</title><rect x="55.3178%" y="661" width="22.5032%" height="15" fill="rgb(243,153,54)" fg:x="4265" fg:w="1735"/><text x="55.5678%" y="671.50">topsnek::logic::point::&lt;impl topsnek..</text></g><g><title>core::array::&lt;impl [T (1,735 samples, 22.50%)</title><rect x="55.3178%" y="645" width="22.5032%" height="15" fill="rgb(251,47,18)" fg:x="4265" fg:w="1735"/><text x="55.5678%" y="655.50">core::array::&lt;impl [T</text></g><g><title> N]&gt;::map (1,735 samples, 22.50%)</title><rect x="55.3178%" y="629" width="22.5032%" height="15" fill="rgb(242,102,42)" fg:x="4265" fg:w="1735"/><text x="55.5678%" y="639.50"> N]&gt;::map</text></g><g><title>core::iter::traits::iterator::Iterator::map (614 samples, 7.96%)</title><rect x="69.8573%" y="613" width="7.9637%" height="15" fill="rgb(234,31,38)" fg:x="5386" fg:w="614"/><text x="70.1073%" y="623.50">core::iter:..</text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (614 samples, 7.96%)</title><rect x="69.8573%" y="597" width="7.9637%" height="15" fill="rgb(221,117,51)" fg:x="5386" fg:w="614"/><text x="70.1073%" y="607.50">core::iter:..</text></g><g><title>topsnek::util::stackqueue::StackQueue&lt;T&gt;::pop_front (599 samples, 7.77%)</title><rect x="77.8210%" y="661" width="7.7691%" height="15" fill="rgb(212,20,18)" fg:x="6000" fg:w="599"/><text x="78.0710%" y="671.50">topsnek::ut..</text></g><g><title>topsnek::logic::scoring::tournament_voronoi (5,795 samples, 75.16%)</title><rect x="17.9118%" y="709" width="75.1621%" height="15" fill="rgb(245,133,36)" fg:x="1381" fg:w="5795"/><text x="18.1618%" y="719.50">topsnek::logic::scoring::tournament_voronoi</text></g><g><title>topsnek::logic::scoring::voronoi (5,789 samples, 75.08%)</title><rect x="17.9896%" y="693" width="75.0843%" height="15" fill="rgb(212,6,19)" fg:x="1387" fg:w="5789"/><text x="18.2396%" y="703.50">topsnek::logic::scoring::voronoi</text></g><g><title>topsnek::logic::voronoi::me_stack (5,785 samples, 75.03%)</title><rect x="18.0415%" y="677" width="75.0324%" height="15" fill="rgb(218,1,36)" fg:x="1391" fg:w="5785"/><text x="18.2915%" y="687.50">topsnek::logic::voronoi::me_stack</text></g><g><title>topsnek::util::stackqueue::StackQueue&lt;T&gt;::push_back (577 samples, 7.48%)</title><rect x="85.5901%" y="661" width="7.4838%" height="15" fill="rgb(246,84,54)" fg:x="6599" fg:w="577"/><text x="85.8401%" y="671.50">topsnek::u..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="93.0869%" y="693" width="0.0130%" height="15" fill="rgb(242,110,6)" fg:x="7177" fg:w="1"/><text x="93.3369%" y="703.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.01%)</title><rect x="93.1128%" y="645" width="0.0130%" height="15" fill="rgb(214,47,5)" fg:x="7179" fg:w="1"/><text x="93.3628%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.01%)</title><rect x="93.1258%" y="645" width="0.0130%" height="15" fill="rgb(218,159,25)" fg:x="7180" fg:w="1"/><text x="93.3758%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.03%)</title><rect x="93.1647%" y="629" width="0.0259%" height="15" fill="rgb(215,211,28)" fg:x="7183" fg:w="2"/><text x="93.4147%" y="639.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.03%)</title><rect x="93.1647%" y="613" width="0.0259%" height="15" fill="rgb(238,59,32)" fg:x="7183" fg:w="2"/><text x="93.4147%" y="623.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.03%)</title><rect x="93.1647%" y="597" width="0.0259%" height="15" fill="rgb(226,82,3)" fg:x="7183" fg:w="2"/><text x="93.4147%" y="607.50"></text></g><g><title>__rdl_realloc (1 samples, 0.01%)</title><rect x="93.1777%" y="581" width="0.0130%" height="15" fill="rgb(240,164,32)" fg:x="7184" fg:w="1"/><text x="93.4277%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.01%)</title><rect x="93.1777%" y="565" width="0.0130%" height="15" fill="rgb(232,46,7)" fg:x="7184" fg:w="1"/><text x="93.4277%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.13%)</title><rect x="93.0999%" y="677" width="0.1297%" height="15" fill="rgb(229,129,53)" fg:x="7178" fg:w="10"/><text x="93.3499%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 0.13%)</title><rect x="93.0999%" y="661" width="0.1297%" height="15" fill="rgb(234,188,29)" fg:x="7178" fg:w="10"/><text x="93.3499%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.09%)</title><rect x="93.1388%" y="645" width="0.0908%" height="15" fill="rgb(246,141,4)" fg:x="7181" fg:w="7"/><text x="93.3888%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.04%)</title><rect x="93.1907%" y="629" width="0.0389%" height="15" fill="rgb(229,23,39)" fg:x="7185" fg:w="3"/><text x="93.4407%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12 samples, 0.16%)</title><rect x="93.0999%" y="693" width="0.1556%" height="15" fill="rgb(206,12,3)" fg:x="7178" fg:w="12"/><text x="93.3499%" y="703.50"></text></g><g><title>core::ptr::write (2 samples, 0.03%)</title><rect x="93.2296%" y="677" width="0.0259%" height="15" fill="rgb(252,226,20)" fg:x="7188" fg:w="2"/><text x="93.4796%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5 samples, 0.06%)</title><rect x="93.2555%" y="693" width="0.0649%" height="15" fill="rgb(216,123,35)" fg:x="7190" fg:w="5"/><text x="93.5055%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.06%)</title><rect x="93.2555%" y="677" width="0.0649%" height="15" fill="rgb(212,68,40)" fg:x="7190" fg:w="5"/><text x="93.5055%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.06%)</title><rect x="93.2555%" y="661" width="0.0649%" height="15" fill="rgb(254,125,32)" fg:x="7190" fg:w="5"/><text x="93.5055%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.06%)</title><rect x="93.2555%" y="645" width="0.0649%" height="15" fill="rgb(253,97,22)" fg:x="7190" fg:w="5"/><text x="93.5055%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.06%)</title><rect x="93.2555%" y="629" width="0.0649%" height="15" fill="rgb(241,101,14)" fg:x="7190" fg:w="5"/><text x="93.5055%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.06%)</title><rect x="93.2555%" y="613" width="0.0649%" height="15" fill="rgb(238,103,29)" fg:x="7190" fg:w="5"/><text x="93.5055%" y="623.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.06%)</title><rect x="93.2555%" y="597" width="0.0649%" height="15" fill="rgb(233,195,47)" fg:x="7190" fg:w="5"/><text x="93.5055%" y="607.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="93.3204%" y="549" width="0.0130%" height="15" fill="rgb(246,218,30)" fg:x="7195" fg:w="1"/><text x="93.5704%" y="559.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.01%)</title><rect x="93.3204%" y="533" width="0.0130%" height="15" fill="rgb(219,145,47)" fg:x="7195" fg:w="1"/><text x="93.5704%" y="543.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.01%)</title><rect x="93.3204%" y="517" width="0.0130%" height="15" fill="rgb(243,12,26)" fg:x="7195" fg:w="1"/><text x="93.5704%" y="527.50"></text></g><g><title>topsnek::logic::point::&lt;impl topsnek::protocol::Point&gt;::neighbour (2 samples, 0.03%)</title><rect x="93.4112%" y="501" width="0.0259%" height="15" fill="rgb(214,87,16)" fg:x="7202" fg:w="2"/><text x="93.6612%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.23%)</title><rect x="93.3204%" y="597" width="0.2335%" height="15" fill="rgb(208,99,42)" fg:x="7195" fg:w="18"/><text x="93.5704%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (18 samples, 0.23%)</title><rect x="93.3204%" y="581" width="0.2335%" height="15" fill="rgb(253,99,2)" fg:x="7195" fg:w="18"/><text x="93.5704%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (18 samples, 0.23%)</title><rect x="93.3204%" y="565" width="0.2335%" height="15" fill="rgb(220,168,23)" fg:x="7195" fg:w="18"/><text x="93.5704%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (17 samples, 0.22%)</title><rect x="93.3333%" y="549" width="0.2205%" height="15" fill="rgb(242,38,24)" fg:x="7196" fg:w="17"/><text x="93.5833%" y="559.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (17 samples, 0.22%)</title><rect x="93.3333%" y="533" width="0.2205%" height="15" fill="rgb(225,182,9)" fg:x="7196" fg:w="17"/><text x="93.5833%" y="543.50"></text></g><g><title>topsnek::snakes::spaceheater::game_solver::all_possible_enemy_moves::{{closure}} (17 samples, 0.22%)</title><rect x="93.3333%" y="517" width="0.2205%" height="15" fill="rgb(243,178,37)" fg:x="7196" fg:w="17"/><text x="93.5833%" y="527.50"></text></g><g><title>topsnek::snakes::spaceheater::game_solver::certain_death (9 samples, 0.12%)</title><rect x="93.4371%" y="501" width="0.1167%" height="15" fill="rgb(232,139,19)" fg:x="7204" fg:w="9"/><text x="93.6871%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (19 samples, 0.25%)</title><rect x="93.3204%" y="629" width="0.2464%" height="15" fill="rgb(225,201,24)" fg:x="7195" fg:w="19"/><text x="93.5704%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (19 samples, 0.25%)</title><rect x="93.3204%" y="613" width="0.2464%" height="15" fill="rgb(221,47,46)" fg:x="7195" fg:w="19"/><text x="93.5704%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.01%)</title><rect x="93.5538%" y="597" width="0.0130%" height="15" fill="rgb(249,23,13)" fg:x="7213" fg:w="1"/><text x="93.8038%" y="607.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="93.5668%" y="581" width="0.0130%" height="15" fill="rgb(219,9,5)" fg:x="7214" fg:w="1"/><text x="93.8168%" y="591.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.01%)</title><rect x="93.5668%" y="565" width="0.0130%" height="15" fill="rgb(254,171,16)" fg:x="7214" fg:w="1"/><text x="93.8168%" y="575.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.01%)</title><rect x="93.5668%" y="549" width="0.0130%" height="15" fill="rgb(230,171,20)" fg:x="7214" fg:w="1"/><text x="93.8168%" y="559.50"></text></g><g><title>topsnek::logic::point::&lt;impl topsnek::protocol::Point&gt;::neighbour (4 samples, 0.05%)</title><rect x="93.6706%" y="533" width="0.0519%" height="15" fill="rgb(210,71,41)" fg:x="7222" fg:w="4"/><text x="93.9206%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.17%)</title><rect x="93.5668%" y="629" width="0.1686%" height="15" fill="rgb(206,173,20)" fg:x="7214" fg:w="13"/><text x="93.8168%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (13 samples, 0.17%)</title><rect x="93.5668%" y="613" width="0.1686%" height="15" fill="rgb(233,88,34)" fg:x="7214" fg:w="13"/><text x="93.8168%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (13 samples, 0.17%)</title><rect x="93.5668%" y="597" width="0.1686%" height="15" fill="rgb(223,209,46)" fg:x="7214" fg:w="13"/><text x="93.8168%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (12 samples, 0.16%)</title><rect x="93.5798%" y="581" width="0.1556%" height="15" fill="rgb(250,43,18)" fg:x="7215" fg:w="12"/><text x="93.8298%" y="591.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (12 samples, 0.16%)</title><rect x="93.5798%" y="565" width="0.1556%" height="15" fill="rgb(208,13,10)" fg:x="7215" fg:w="12"/><text x="93.8298%" y="575.50"></text></g><g><title>topsnek::snakes::spaceheater::game_solver::all_possible_enemy_moves::{{closure}} (12 samples, 0.16%)</title><rect x="93.5798%" y="549" width="0.1556%" height="15" fill="rgb(212,200,36)" fg:x="7215" fg:w="12"/><text x="93.8298%" y="559.50"></text></g><g><title>topsnek::snakes::spaceheater::game_solver::certain_death (1 samples, 0.01%)</title><rect x="93.7224%" y="533" width="0.0130%" height="15" fill="rgb(225,90,30)" fg:x="7226" fg:w="1"/><text x="93.9724%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (33 samples, 0.43%)</title><rect x="93.3204%" y="693" width="0.4280%" height="15" fill="rgb(236,182,39)" fg:x="7195" fg:w="33"/><text x="93.5704%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (33 samples, 0.43%)</title><rect x="93.3204%" y="677" width="0.4280%" height="15" fill="rgb(212,144,35)" fg:x="7195" fg:w="33"/><text x="93.5704%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33 samples, 0.43%)</title><rect x="93.3204%" y="661" width="0.4280%" height="15" fill="rgb(228,63,44)" fg:x="7195" fg:w="33"/><text x="93.5704%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (33 samples, 0.43%)</title><rect x="93.3204%" y="645" width="0.4280%" height="15" fill="rgb(228,109,6)" fg:x="7195" fg:w="33"/><text x="93.5704%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.01%)</title><rect x="93.7354%" y="629" width="0.0130%" height="15" fill="rgb(238,117,24)" fg:x="7227" fg:w="1"/><text x="93.9854%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="93.7354%" y="613" width="0.0130%" height="15" fill="rgb(242,26,26)" fg:x="7227" fg:w="1"/><text x="93.9854%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="93.7354%" y="597" width="0.0130%" height="15" fill="rgb(221,92,48)" fg:x="7227" fg:w="1"/><text x="93.9854%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="93.7354%" y="581" width="0.0130%" height="15" fill="rgb(209,209,32)" fg:x="7227" fg:w="1"/><text x="93.9854%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="93.7354%" y="565" width="0.0130%" height="15" fill="rgb(221,70,22)" fg:x="7227" fg:w="1"/><text x="93.9854%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="93.7354%" y="549" width="0.0130%" height="15" fill="rgb(248,145,5)" fg:x="7227" fg:w="1"/><text x="93.9854%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="93.7354%" y="533" width="0.0130%" height="15" fill="rgb(226,116,26)" fg:x="7227" fg:w="1"/><text x="93.9854%" y="543.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="93.7354%" y="517" width="0.0130%" height="15" fill="rgb(244,5,17)" fg:x="7227" fg:w="1"/><text x="93.9854%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="93.7354%" y="501" width="0.0130%" height="15" fill="rgb(252,159,33)" fg:x="7227" fg:w="1"/><text x="93.9854%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;topsnek::protocol::Direction&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="93.7484%" y="693" width="0.0130%" height="15" fill="rgb(206,71,0)" fg:x="7228" fg:w="1"/><text x="93.9984%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="93.7484%" y="677" width="0.0130%" height="15" fill="rgb(233,118,54)" fg:x="7228" fg:w="1"/><text x="93.9984%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;topsnek::protocol::Direction&gt;]&gt; (1 samples, 0.01%)</title><rect x="93.7484%" y="661" width="0.0130%" height="15" fill="rgb(234,83,48)" fg:x="7228" fg:w="1"/><text x="93.9984%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;topsnek::protocol::Direction&gt;&gt; (1 samples, 0.01%)</title><rect x="93.7484%" y="645" width="0.0130%" height="15" fill="rgb(228,3,54)" fg:x="7228" fg:w="1"/><text x="93.9984%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;topsnek::protocol::Direction&gt;&gt; (1 samples, 0.01%)</title><rect x="93.7484%" y="629" width="0.0130%" height="15" fill="rgb(226,155,13)" fg:x="7228" fg:w="1"/><text x="93.9984%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="93.7484%" y="613" width="0.0130%" height="15" fill="rgb(241,28,37)" fg:x="7228" fg:w="1"/><text x="93.9984%" y="623.50"></text></g><g><title>topsnek::snakes::spaceheater::game_solver::all_possible_enemy_moves (54 samples, 0.70%)</title><rect x="93.0739%" y="709" width="0.7004%" height="15" fill="rgb(233,93,10)" fg:x="7176" fg:w="54"/><text x="93.3239%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;topsnek::protocol::Direction&gt;&gt; (1 samples, 0.01%)</title><rect x="93.7613%" y="693" width="0.0130%" height="15" fill="rgb(225,113,19)" fg:x="7229" fg:w="1"/><text x="94.0113%" y="703.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="93.7613%" y="677" width="0.0130%" height="15" fill="rgb(241,2,18)" fg:x="7229" fg:w="1"/><text x="94.0113%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;topsnek::protocol::Direction,alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="93.7613%" y="661" width="0.0130%" height="15" fill="rgb(228,207,21)" fg:x="7229" fg:w="1"/><text x="94.0113%" y="671.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="93.7613%" y="645" width="0.0130%" height="15" fill="rgb(213,211,35)" fg:x="7229" fg:w="1"/><text x="94.0113%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;topsnek::protocol::Direction&gt;&gt; (1 samples, 0.01%)</title><rect x="93.7613%" y="629" width="0.0130%" height="15" fill="rgb(209,83,10)" fg:x="7229" fg:w="1"/><text x="94.0113%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="93.7613%" y="613" width="0.0130%" height="15" fill="rgb(209,164,1)" fg:x="7229" fg:w="1"/><text x="94.0113%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="93.7613%" y="597" width="0.0130%" height="15" fill="rgb(213,184,43)" fg:x="7229" fg:w="1"/><text x="94.0113%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="93.7613%" y="581" width="0.0130%" height="15" fill="rgb(231,61,34)" fg:x="7229" fg:w="1"/><text x="94.0113%" y="591.50"></text></g><g><title>topsnek::snakes::spaceheater::game_solver::certain_death (3 samples, 0.04%)</title><rect x="93.7743%" y="709" width="0.0389%" height="15" fill="rgb(235,75,3)" fg:x="7230" fg:w="3"/><text x="94.0243%" y="719.50"></text></g><g><title>topsnek::logic::board::Board::get (1 samples, 0.01%)</title><rect x="93.8003%" y="693" width="0.0130%" height="15" fill="rgb(220,106,47)" fg:x="7232" fg:w="1"/><text x="94.0503%" y="703.50"></text></g><g><title>core::hash::Hash::hash_slice (2 samples, 0.03%)</title><rect x="93.8132%" y="549" width="0.0259%" height="15" fill="rgb(210,196,33)" fg:x="7233" fg:w="2"/><text x="94.0632%" y="559.50"></text></g><g><title>&lt;topsnek::protocol::Direction as core::hash::Hash&gt;::hash (2 samples, 0.03%)</title><rect x="93.8132%" y="533" width="0.0259%" height="15" fill="rgb(229,154,42)" fg:x="7233" fg:w="2"/><text x="94.0632%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1 samples, 0.01%)</title><rect x="93.8262%" y="517" width="0.0130%" height="15" fill="rgb(228,114,26)" fg:x="7234" fg:w="1"/><text x="94.0762%" y="527.50"></text></g><g><title>core::hash::Hasher::write_isize (1 samples, 0.01%)</title><rect x="93.8262%" y="501" width="0.0130%" height="15" fill="rgb(208,144,1)" fg:x="7234" fg:w="1"/><text x="94.0762%" y="511.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="93.8262%" y="485" width="0.0130%" height="15" fill="rgb(239,112,37)" fg:x="7234" fg:w="1"/><text x="94.0762%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="93.8262%" y="469" width="0.0130%" height="15" fill="rgb(210,96,50)" fg:x="7234" fg:w="1"/><text x="94.0762%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="93.8262%" y="453" width="0.0130%" height="15" fill="rgb(222,178,2)" fg:x="7234" fg:w="1"/><text x="94.0762%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="93.8262%" y="437" width="0.0130%" height="15" fill="rgb(226,74,18)" fg:x="7234" fg:w="1"/><text x="94.0762%" y="447.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (3 samples, 0.04%)</title><rect x="93.8132%" y="693" width="0.0389%" height="15" fill="rgb(225,67,54)" fg:x="7233" fg:w="3"/><text x="94.0632%" y="703.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (3 samples, 0.04%)</title><rect x="93.8132%" y="677" width="0.0389%" height="15" fill="rgb(251,92,32)" fg:x="7233" fg:w="3"/><text x="94.0632%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3 samples, 0.04%)</title><rect x="93.8132%" y="661" width="0.0389%" height="15" fill="rgb(228,149,22)" fg:x="7233" fg:w="3"/><text x="94.0632%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.04%)</title><rect x="93.8132%" y="645" width="0.0389%" height="15" fill="rgb(243,54,13)" fg:x="7233" fg:w="3"/><text x="94.0632%" y="655.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.04%)</title><rect x="93.8132%" y="629" width="0.0389%" height="15" fill="rgb(243,180,28)" fg:x="7233" fg:w="3"/><text x="94.0632%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.04%)</title><rect x="93.8132%" y="613" width="0.0389%" height="15" fill="rgb(208,167,24)" fg:x="7233" fg:w="3"/><text x="94.0632%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.04%)</title><rect x="93.8132%" y="597" width="0.0389%" height="15" fill="rgb(245,73,45)" fg:x="7233" fg:w="3"/><text x="94.0632%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="93.8132%" y="581" width="0.0389%" height="15" fill="rgb(237,203,48)" fg:x="7233" fg:w="3"/><text x="94.0632%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.04%)</title><rect x="93.8132%" y="565" width="0.0389%" height="15" fill="rgb(211,197,16)" fg:x="7233" fg:w="3"/><text x="94.0632%" y="575.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="93.8392%" y="549" width="0.0130%" height="15" fill="rgb(243,99,51)" fg:x="7235" fg:w="1"/><text x="94.0892%" y="559.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="93.8392%" y="533" width="0.0130%" height="15" fill="rgb(215,123,29)" fg:x="7235" fg:w="1"/><text x="94.0892%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="93.8392%" y="517" width="0.0130%" height="15" fill="rgb(239,186,37)" fg:x="7235" fg:w="1"/><text x="94.0892%" y="527.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="93.8392%" y="501" width="0.0130%" height="15" fill="rgb(252,136,39)" fg:x="7235" fg:w="1"/><text x="94.0892%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="93.8392%" y="485" width="0.0130%" height="15" fill="rgb(223,213,32)" fg:x="7235" fg:w="1"/><text x="94.0892%" y="495.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="93.8392%" y="469" width="0.0130%" height="15" fill="rgb(233,115,5)" fg:x="7235" fg:w="1"/><text x="94.0892%" y="479.50"></text></g><g><title>topsnek::snakes::spaceheater::scorecard::Scorecard&lt;T&gt;::is_certain_death (4 samples, 0.05%)</title><rect x="93.8132%" y="709" width="0.0519%" height="15" fill="rgb(207,226,44)" fg:x="7233" fg:w="4"/><text x="94.0632%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.01%)</title><rect x="93.8521%" y="693" width="0.0130%" height="15" fill="rgb(208,126,0)" fg:x="7236" fg:w="1"/><text x="94.1021%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1 samples, 0.01%)</title><rect x="93.8521%" y="677" width="0.0130%" height="15" fill="rgb(244,66,21)" fg:x="7236" fg:w="1"/><text x="94.1021%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (1 samples, 0.01%)</title><rect x="93.8521%" y="661" width="0.0130%" height="15" fill="rgb(222,97,12)" fg:x="7236" fg:w="1"/><text x="94.1021%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.01%)</title><rect x="93.8521%" y="645" width="0.0130%" height="15" fill="rgb(219,213,19)" fg:x="7236" fg:w="1"/><text x="94.1021%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.01%)</title><rect x="93.8521%" y="629" width="0.0130%" height="15" fill="rgb(252,169,30)" fg:x="7236" fg:w="1"/><text x="94.1021%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;topsnek::snakes::spaceheater::scorecard::ScorecardInternal&lt;topsnek::logic::scoring::TournamentVoronoiScore&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="93.8781%" y="693" width="0.0130%" height="15" fill="rgb(206,32,51)" fg:x="7238" fg:w="1"/><text x="94.1281%" y="703.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="93.8781%" y="677" width="0.0130%" height="15" fill="rgb(250,172,42)" fg:x="7238" fg:w="1"/><text x="94.1281%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (1 samples, 0.01%)</title><rect x="93.8781%" y="661" width="0.0130%" height="15" fill="rgb(209,34,43)" fg:x="7238" fg:w="1"/><text x="94.1281%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (1 samples, 0.01%)</title><rect x="93.8781%" y="645" width="0.0130%" height="15" fill="rgb(223,11,35)" fg:x="7238" fg:w="1"/><text x="94.1281%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (1 samples, 0.01%)</title><rect x="93.8781%" y="629" width="0.0130%" height="15" fill="rgb(251,219,26)" fg:x="7238" fg:w="1"/><text x="94.1281%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_swap (1 samples, 0.01%)</title><rect x="93.8781%" y="613" width="0.0130%" height="15" fill="rgb(231,119,3)" fg:x="7238" fg:w="1"/><text x="94.1281%" y="623.50"></text></g><g><title>core::hash::Hash::hash_slice (1 samples, 0.01%)</title><rect x="93.9170%" y="565" width="0.0130%" height="15" fill="rgb(216,97,11)" fg:x="7241" fg:w="1"/><text x="94.1670%" y="575.50"></text></g><g><title>&lt;topsnek::protocol::Direction as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="93.9170%" y="549" width="0.0130%" height="15" fill="rgb(223,59,9)" fg:x="7241" fg:w="1"/><text x="94.1670%" y="559.50"></text></g><g><title>hashbrown::map::make_insert_hash (3 samples, 0.04%)</title><rect x="93.9040%" y="645" width="0.0389%" height="15" fill="rgb(233,93,31)" fg:x="7240" fg:w="3"/><text x="94.1540%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.04%)</title><rect x="93.9040%" y="629" width="0.0389%" height="15" fill="rgb(239,81,33)" fg:x="7240" fg:w="3"/><text x="94.1540%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.03%)</title><rect x="93.9170%" y="613" width="0.0259%" height="15" fill="rgb(213,120,34)" fg:x="7241" fg:w="2"/><text x="94.1670%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (2 samples, 0.03%)</title><rect x="93.9170%" y="597" width="0.0259%" height="15" fill="rgb(243,49,53)" fg:x="7241" fg:w="2"/><text x="94.1670%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.03%)</title><rect x="93.9170%" y="581" width="0.0259%" height="15" fill="rgb(247,216,33)" fg:x="7241" fg:w="2"/><text x="94.1670%" y="591.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.01%)</title><rect x="93.9300%" y="565" width="0.0130%" height="15" fill="rgb(226,26,14)" fg:x="7242" fg:w="1"/><text x="94.1800%" y="575.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="93.9300%" y="549" width="0.0130%" height="15" fill="rgb(215,49,53)" fg:x="7242" fg:w="1"/><text x="94.1800%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="93.9300%" y="533" width="0.0130%" height="15" fill="rgb(245,162,40)" fg:x="7242" fg:w="1"/><text x="94.1800%" y="543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="93.9300%" y="517" width="0.0130%" height="15" fill="rgb(229,68,17)" fg:x="7242" fg:w="1"/><text x="94.1800%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="93.9300%" y="501" width="0.0130%" height="15" fill="rgb(213,182,10)" fg:x="7242" fg:w="1"/><text x="94.1800%" y="511.50"></text></g><g><title>topsnek::snakes::spaceheater::scorecard::Scorecard&lt;T&gt;::post_certain_death (8 samples, 0.10%)</title><rect x="93.8651%" y="709" width="0.1038%" height="15" fill="rgb(245,125,30)" fg:x="7237" fg:w="8"/><text x="94.1151%" y="719.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (6 samples, 0.08%)</title><rect x="93.8911%" y="693" width="0.0778%" height="15" fill="rgb(232,202,2)" fg:x="7239" fg:w="6"/><text x="94.1411%" y="703.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (6 samples, 0.08%)</title><rect x="93.8911%" y="677" width="0.0778%" height="15" fill="rgb(237,140,51)" fg:x="7239" fg:w="6"/><text x="94.1411%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.08%)</title><rect x="93.8911%" y="661" width="0.0778%" height="15" fill="rgb(236,157,25)" fg:x="7239" fg:w="6"/><text x="94.1411%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (2 samples, 0.03%)</title><rect x="93.9429%" y="645" width="0.0259%" height="15" fill="rgb(219,209,0)" fg:x="7243" fg:w="2"/><text x="94.1929%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.03%)</title><rect x="93.9429%" y="629" width="0.0259%" height="15" fill="rgb(240,116,54)" fg:x="7243" fg:w="2"/><text x="94.1929%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.03%)</title><rect x="93.9429%" y="613" width="0.0259%" height="15" fill="rgb(216,10,36)" fg:x="7243" fg:w="2"/><text x="94.1929%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.01%)</title><rect x="93.9559%" y="597" width="0.0130%" height="15" fill="rgb(222,72,44)" fg:x="7244" fg:w="1"/><text x="94.2059%" y="607.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.01%)</title><rect x="93.9559%" y="581" width="0.0130%" height="15" fill="rgb(232,159,9)" fg:x="7244" fg:w="1"/><text x="94.2059%" y="591.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1 samples, 0.01%)</title><rect x="93.9559%" y="565" width="0.0130%" height="15" fill="rgb(210,39,32)" fg:x="7244" fg:w="1"/><text x="94.2059%" y="575.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.01%)</title><rect x="93.9559%" y="549" width="0.0130%" height="15" fill="rgb(216,194,45)" fg:x="7244" fg:w="1"/><text x="94.2059%" y="559.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.01%)</title><rect x="93.9559%" y="533" width="0.0130%" height="15" fill="rgb(218,18,35)" fg:x="7244" fg:w="1"/><text x="94.2059%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (1 samples, 0.01%)</title><rect x="93.9559%" y="517" width="0.0130%" height="15" fill="rgb(207,83,51)" fg:x="7244" fg:w="1"/><text x="94.2059%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.01%)</title><rect x="93.9559%" y="501" width="0.0130%" height="15" fill="rgb(225,63,43)" fg:x="7244" fg:w="1"/><text x="94.2059%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (1 samples, 0.01%)</title><rect x="93.9559%" y="485" width="0.0130%" height="15" fill="rgb(207,57,36)" fg:x="7244" fg:w="1"/><text x="94.2059%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::{{closure}} (1 samples, 0.01%)</title><rect x="93.9559%" y="469" width="0.0130%" height="15" fill="rgb(216,99,33)" fg:x="7244" fg:w="1"/><text x="94.2059%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.01%)</title><rect x="93.9559%" y="453" width="0.0130%" height="15" fill="rgb(225,42,16)" fg:x="7244" fg:w="1"/><text x="94.2059%" y="463.50"></text></g><g><title>&lt;topsnek::protocol::Direction as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="93.9559%" y="437" width="0.0130%" height="15" fill="rgb(220,201,45)" fg:x="7244" fg:w="1"/><text x="94.2059%" y="447.50"></text></g><g><title>core::hash::Hash::hash_slice (1 samples, 0.01%)</title><rect x="93.9689%" y="565" width="0.0130%" height="15" fill="rgb(225,33,4)" fg:x="7245" fg:w="1"/><text x="94.2189%" y="575.50"></text></g><g><title>&lt;topsnek::protocol::Direction as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="93.9689%" y="549" width="0.0130%" height="15" fill="rgb(224,33,50)" fg:x="7245" fg:w="1"/><text x="94.2189%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1 samples, 0.01%)</title><rect x="93.9689%" y="533" width="0.0130%" height="15" fill="rgb(246,198,51)" fg:x="7245" fg:w="1"/><text x="94.2189%" y="543.50"></text></g><g><title>core::hash::Hasher::write_isize (1 samples, 0.01%)</title><rect x="93.9689%" y="517" width="0.0130%" height="15" fill="rgb(205,22,4)" fg:x="7245" fg:w="1"/><text x="94.2189%" y="527.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="93.9689%" y="501" width="0.0130%" height="15" fill="rgb(206,3,8)" fg:x="7245" fg:w="1"/><text x="94.2189%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="93.9689%" y="485" width="0.0130%" height="15" fill="rgb(251,23,15)" fg:x="7245" fg:w="1"/><text x="94.2189%" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="93.9689%" y="469" width="0.0130%" height="15" fill="rgb(252,88,28)" fg:x="7245" fg:w="1"/><text x="94.2189%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="93.9689%" y="453" width="0.0130%" height="15" fill="rgb(212,127,14)" fg:x="7245" fg:w="1"/><text x="94.2189%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="93.9689%" y="437" width="0.0130%" height="15" fill="rgb(247,145,37)" fg:x="7245" fg:w="1"/><text x="94.2189%" y="447.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.04%)</title><rect x="93.9689%" y="645" width="0.0389%" height="15" fill="rgb(209,117,53)" fg:x="7245" fg:w="3"/><text x="94.2189%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.04%)</title><rect x="93.9689%" y="629" width="0.0389%" height="15" fill="rgb(212,90,42)" fg:x="7245" fg:w="3"/><text x="94.2189%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.04%)</title><rect x="93.9689%" y="613" width="0.0389%" height="15" fill="rgb(218,164,37)" fg:x="7245" fg:w="3"/><text x="94.2189%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (3 samples, 0.04%)</title><rect x="93.9689%" y="597" width="0.0389%" height="15" fill="rgb(246,65,34)" fg:x="7245" fg:w="3"/><text x="94.2189%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3 samples, 0.04%)</title><rect x="93.9689%" y="581" width="0.0389%" height="15" fill="rgb(231,100,33)" fg:x="7245" fg:w="3"/><text x="94.2189%" y="591.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.03%)</title><rect x="93.9818%" y="565" width="0.0259%" height="15" fill="rgb(228,126,14)" fg:x="7246" fg:w="2"/><text x="94.2318%" y="575.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.03%)</title><rect x="93.9818%" y="549" width="0.0259%" height="15" fill="rgb(215,173,21)" fg:x="7246" fg:w="2"/><text x="94.2318%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.03%)</title><rect x="93.9818%" y="533" width="0.0259%" height="15" fill="rgb(210,6,40)" fg:x="7246" fg:w="2"/><text x="94.2318%" y="543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.03%)</title><rect x="93.9818%" y="517" width="0.0259%" height="15" fill="rgb(212,48,18)" fg:x="7246" fg:w="2"/><text x="94.2318%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.03%)</title><rect x="93.9818%" y="501" width="0.0259%" height="15" fill="rgb(230,214,11)" fg:x="7246" fg:w="2"/><text x="94.2318%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (7 samples, 0.09%)</title><rect x="93.9689%" y="693" width="0.0908%" height="15" fill="rgb(254,105,39)" fg:x="7245" fg:w="7"/><text x="94.2189%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (7 samples, 0.09%)</title><rect x="93.9689%" y="677" width="0.0908%" height="15" fill="rgb(245,158,5)" fg:x="7245" fg:w="7"/><text x="94.2189%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (7 samples, 0.09%)</title><rect x="93.9689%" y="661" width="0.0908%" height="15" fill="rgb(249,208,11)" fg:x="7245" fg:w="7"/><text x="94.2189%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (4 samples, 0.05%)</title><rect x="94.0078%" y="645" width="0.0519%" height="15" fill="rgb(210,39,28)" fg:x="7248" fg:w="4"/><text x="94.2578%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.05%)</title><rect x="94.0078%" y="629" width="0.0519%" height="15" fill="rgb(211,56,53)" fg:x="7248" fg:w="4"/><text x="94.2578%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (4 samples, 0.05%)</title><rect x="94.0078%" y="613" width="0.0519%" height="15" fill="rgb(226,201,30)" fg:x="7248" fg:w="4"/><text x="94.2578%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (4 samples, 0.05%)</title><rect x="94.0078%" y="597" width="0.0519%" height="15" fill="rgb(239,101,34)" fg:x="7248" fg:w="4"/><text x="94.2578%" y="607.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (4 samples, 0.05%)</title><rect x="94.0078%" y="581" width="0.0519%" height="15" fill="rgb(226,209,5)" fg:x="7248" fg:w="4"/><text x="94.2578%" y="591.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (4 samples, 0.05%)</title><rect x="94.0078%" y="565" width="0.0519%" height="15" fill="rgb(250,105,47)" fg:x="7248" fg:w="4"/><text x="94.2578%" y="575.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4 samples, 0.05%)</title><rect x="94.0078%" y="549" width="0.0519%" height="15" fill="rgb(230,72,3)" fg:x="7248" fg:w="4"/><text x="94.2578%" y="559.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4 samples, 0.05%)</title><rect x="94.0078%" y="533" width="0.0519%" height="15" fill="rgb(232,218,39)" fg:x="7248" fg:w="4"/><text x="94.2578%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.01%)</title><rect x="94.0597%" y="693" width="0.0130%" height="15" fill="rgb(248,166,6)" fg:x="7252" fg:w="1"/><text x="94.3097%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.01%)</title><rect x="94.0597%" y="677" width="0.0130%" height="15" fill="rgb(247,89,20)" fg:x="7252" fg:w="1"/><text x="94.3097%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.01%)</title><rect x="94.0597%" y="661" width="0.0130%" height="15" fill="rgb(248,130,54)" fg:x="7252" fg:w="1"/><text x="94.3097%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.01%)</title><rect x="94.0597%" y="645" width="0.0130%" height="15" fill="rgb(234,196,4)" fg:x="7252" fg:w="1"/><text x="94.3097%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.01%)</title><rect x="94.0597%" y="629" width="0.0130%" height="15" fill="rgb(250,143,31)" fg:x="7252" fg:w="1"/><text x="94.3097%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.01%)</title><rect x="94.0597%" y="613" width="0.0130%" height="15" fill="rgb(211,110,34)" fg:x="7252" fg:w="1"/><text x="94.3097%" y="623.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.01%)</title><rect x="94.0597%" y="597" width="0.0130%" height="15" fill="rgb(215,124,48)" fg:x="7252" fg:w="1"/><text x="94.3097%" y="607.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1 samples, 0.01%)</title><rect x="94.0597%" y="581" width="0.0130%" height="15" fill="rgb(216,46,13)" fg:x="7252" fg:w="1"/><text x="94.3097%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.01%)</title><rect x="94.0597%" y="565" width="0.0130%" height="15" fill="rgb(205,184,25)" fg:x="7252" fg:w="1"/><text x="94.3097%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.01%)</title><rect x="94.0597%" y="549" width="0.0130%" height="15" fill="rgb(228,1,10)" fg:x="7252" fg:w="1"/><text x="94.3097%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (1 samples, 0.01%)</title><rect x="94.0597%" y="533" width="0.0130%" height="15" fill="rgb(213,116,27)" fg:x="7252" fg:w="1"/><text x="94.3097%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.01%)</title><rect x="94.0597%" y="517" width="0.0130%" height="15" fill="rgb(241,95,50)" fg:x="7252" fg:w="1"/><text x="94.3097%" y="527.50"></text></g><g><title>topsnek::snakes::spaceheater::game_solver::evaluate_game (7,149 samples, 92.72%)</title><rect x="1.4656%" y="725" width="92.7237%" height="15" fill="rgb(238,48,32)" fg:x="113" fg:w="7149"/><text x="1.7156%" y="735.50">topsnek::snakes::spaceheater::game_solver::evaluate_game</text></g><g><title>topsnek::snakes::spaceheater::scorecard::Scorecard&lt;T&gt;::post_score (17 samples, 0.22%)</title><rect x="93.9689%" y="709" width="0.2205%" height="15" fill="rgb(235,113,49)" fg:x="7245" fg:w="17"/><text x="94.2189%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (9 samples, 0.12%)</title><rect x="94.0726%" y="693" width="0.1167%" height="15" fill="rgb(205,127,43)" fg:x="7253" fg:w="9"/><text x="94.3226%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (9 samples, 0.12%)</title><rect x="94.0726%" y="677" width="0.1167%" height="15" fill="rgb(250,162,2)" fg:x="7253" fg:w="9"/><text x="94.3226%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (9 samples, 0.12%)</title><rect x="94.0726%" y="661" width="0.1167%" height="15" fill="rgb(220,13,41)" fg:x="7253" fg:w="9"/><text x="94.3226%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (8 samples, 0.10%)</title><rect x="94.0856%" y="645" width="0.1038%" height="15" fill="rgb(249,221,25)" fg:x="7254" fg:w="8"/><text x="94.3356%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (8 samples, 0.10%)</title><rect x="94.0856%" y="629" width="0.1038%" height="15" fill="rgb(215,208,19)" fg:x="7254" fg:w="8"/><text x="94.3356%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(topsnek::snakes::spaceheater::game_solver::WorkItem,usize)&gt;&gt; (2 samples, 0.03%)</title><rect x="94.1894%" y="709" width="0.0259%" height="15" fill="rgb(236,175,2)" fg:x="7262" fg:w="2"/><text x="94.4394%" y="719.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.01%)</title><rect x="94.2023%" y="693" width="0.0130%" height="15" fill="rgb(241,52,2)" fg:x="7263" fg:w="1"/><text x="94.4523%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="94.2023%" y="677" width="0.0130%" height="15" fill="rgb(248,140,14)" fg:x="7263" fg:w="1"/><text x="94.4523%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="94.2023%" y="661" width="0.0130%" height="15" fill="rgb(253,22,42)" fg:x="7263" fg:w="1"/><text x="94.4523%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::map::core::raw::OccupiedEntry&lt;topsnek::snakes::spaceheater::game_solver::WorkItem,usize&gt;&gt; (1 samples, 0.01%)</title><rect x="94.2153%" y="693" width="0.0130%" height="15" fill="rgb(234,61,47)" fg:x="7264" fg:w="1"/><text x="94.4653%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;topsnek::snakes::spaceheater::game_solver::WorkItem&gt; (1 samples, 0.01%)</title><rect x="94.2153%" y="677" width="0.0130%" height="15" fill="rgb(208,226,15)" fg:x="7264" fg:w="1"/><text x="94.4653%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;topsnek::logic::game::Game&gt; (1 samples, 0.01%)</title><rect x="94.2153%" y="661" width="0.0130%" height="15" fill="rgb(217,221,4)" fg:x="7264" fg:w="1"/><text x="94.4653%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;topsnek::protocol::Ruleset&gt;&gt; (1 samples, 0.01%)</title><rect x="94.2153%" y="645" width="0.0130%" height="15" fill="rgb(212,174,34)" fg:x="7264" fg:w="1"/><text x="94.4653%" y="655.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="94.2153%" y="629" width="0.0130%" height="15" fill="rgb(253,83,4)" fg:x="7264" fg:w="1"/><text x="94.4653%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.01%)</title><rect x="94.2153%" y="613" width="0.0130%" height="15" fill="rgb(250,195,49)" fg:x="7264" fg:w="1"/><text x="94.4653%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.01%)</title><rect x="94.2153%" y="597" width="0.0130%" height="15" fill="rgb(241,192,25)" fg:x="7264" fg:w="1"/><text x="94.4653%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="94.2412%" y="645" width="0.0130%" height="15" fill="rgb(208,124,10)" fg:x="7266" fg:w="1"/><text x="94.4912%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.01%)</title><rect x="94.2412%" y="629" width="0.0130%" height="15" fill="rgb(222,33,0)" fg:x="7266" fg:w="1"/><text x="94.4912%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.01%)</title><rect x="94.2412%" y="613" width="0.0130%" height="15" fill="rgb(234,209,28)" fg:x="7266" fg:w="1"/><text x="94.4912%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.01%)</title><rect x="94.2412%" y="597" width="0.0130%" height="15" fill="rgb(224,11,23)" fg:x="7266" fg:w="1"/><text x="94.4912%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.01%)</title><rect x="94.2412%" y="581" width="0.0130%" height="15" fill="rgb(232,99,1)" fg:x="7266" fg:w="1"/><text x="94.4912%" y="591.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.01%)</title><rect x="94.2412%" y="565" width="0.0130%" height="15" fill="rgb(237,95,45)" fg:x="7266" fg:w="1"/><text x="94.4912%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="94.2412%" y="549" width="0.0130%" height="15" fill="rgb(208,109,11)" fg:x="7266" fg:w="1"/><text x="94.4912%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="94.2542%" y="645" width="0.0130%" height="15" fill="rgb(216,190,48)" fg:x="7267" fg:w="1"/><text x="94.5042%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.01%)</title><rect x="94.2542%" y="629" width="0.0130%" height="15" fill="rgb(251,171,36)" fg:x="7267" fg:w="1"/><text x="94.5042%" y="639.50"></text></g><g><title>core::hash::Hash::hash_slice (1 samples, 0.01%)</title><rect x="94.2542%" y="613" width="0.0130%" height="15" fill="rgb(230,62,22)" fg:x="7267" fg:w="1"/><text x="94.5042%" y="623.50"></text></g><g><title>&lt;topsnek::protocol::Direction as core::hash::Hash&gt;::hash (1 samples, 0.01%)</title><rect x="94.2542%" y="597" width="0.0130%" height="15" fill="rgb(225,114,35)" fg:x="7267" fg:w="1"/><text x="94.5042%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="94.2672%" y="549" width="0.0130%" height="15" fill="rgb(215,118,42)" fg:x="7268" fg:w="1"/><text x="94.5172%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="94.2672%" y="533" width="0.0130%" height="15" fill="rgb(243,119,21)" fg:x="7268" fg:w="1"/><text x="94.5172%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.01%)</title><rect x="94.2672%" y="517" width="0.0130%" height="15" fill="rgb(252,177,53)" fg:x="7268" fg:w="1"/><text x="94.5172%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (2 samples, 0.03%)</title><rect x="94.2672%" y="629" width="0.0259%" height="15" fill="rgb(237,209,29)" fg:x="7268" fg:w="2"/><text x="94.5172%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2 samples, 0.03%)</title><rect x="94.2672%" y="613" width="0.0259%" height="15" fill="rgb(212,65,23)" fg:x="7268" fg:w="2"/><text x="94.5172%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (2 samples, 0.03%)</title><rect x="94.2672%" y="597" width="0.0259%" height="15" fill="rgb(230,222,46)" fg:x="7268" fg:w="2"/><text x="94.5172%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2 samples, 0.03%)</title><rect x="94.2672%" y="581" width="0.0259%" height="15" fill="rgb(215,135,32)" fg:x="7268" fg:w="2"/><text x="94.5172%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2 samples, 0.03%)</title><rect x="94.2672%" y="565" width="0.0259%" height="15" fill="rgb(246,101,22)" fg:x="7268" fg:w="2"/><text x="94.5172%" y="575.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.01%)</title><rect x="94.2802%" y="549" width="0.0130%" height="15" fill="rgb(206,107,13)" fg:x="7269" fg:w="1"/><text x="94.5302%" y="559.50"></text></g><g><title>&lt;std::thread::Packet&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="94.2802%" y="533" width="0.0130%" height="15" fill="rgb(250,100,44)" fg:x="7269" fg:w="1"/><text x="94.5302%" y="543.50"></text></g><g><title>core::cmp::min (1 samples, 0.01%)</title><rect x="94.3709%" y="341" width="0.0130%" height="15" fill="rgb(231,147,38)" fg:x="7276" fg:w="1"/><text x="94.6209%" y="351.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.01%)</title><rect x="94.3709%" y="325" width="0.0130%" height="15" fill="rgb(229,8,40)" fg:x="7276" fg:w="1"/><text x="94.6209%" y="335.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::hash::Hash&gt;::hash (8 samples, 0.10%)</title><rect x="94.2931%" y="565" width="0.1038%" height="15" fill="rgb(221,135,30)" fg:x="7270" fg:w="8"/><text x="94.5431%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 0.10%)</title><rect x="94.2931%" y="549" width="0.1038%" height="15" fill="rgb(249,193,18)" fg:x="7270" fg:w="8"/><text x="94.5431%" y="559.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.10%)</title><rect x="94.2931%" y="533" width="0.1038%" height="15" fill="rgb(209,133,39)" fg:x="7270" fg:w="8"/><text x="94.5431%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (8 samples, 0.10%)</title><rect x="94.2931%" y="517" width="0.1038%" height="15" fill="rgb(232,100,14)" fg:x="7270" fg:w="8"/><text x="94.5431%" y="527.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (8 samples, 0.10%)</title><rect x="94.2931%" y="501" width="0.1038%" height="15" fill="rgb(224,185,1)" fg:x="7270" fg:w="8"/><text x="94.5431%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (8 samples, 0.10%)</title><rect x="94.2931%" y="485" width="0.1038%" height="15" fill="rgb(223,139,8)" fg:x="7270" fg:w="8"/><text x="94.5431%" y="495.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::hash::Hash&gt;::hash::{{closure}} (8 samples, 0.10%)</title><rect x="94.2931%" y="469" width="0.1038%" height="15" fill="rgb(232,213,38)" fg:x="7270" fg:w="8"/><text x="94.5431%" y="479.50"></text></g><g><title>&lt;topsnek::protocol::Point as core::hash::Hash&gt;::hash (8 samples, 0.10%)</title><rect x="94.2931%" y="453" width="0.1038%" height="15" fill="rgb(207,94,22)" fg:x="7270" fg:w="8"/><text x="94.5431%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i8&gt;::hash (6 samples, 0.08%)</title><rect x="94.3191%" y="437" width="0.0778%" height="15" fill="rgb(219,183,54)" fg:x="7272" fg:w="6"/><text x="94.5691%" y="447.50"></text></g><g><title>core::hash::Hasher::write_i8 (6 samples, 0.08%)</title><rect x="94.3191%" y="421" width="0.0778%" height="15" fill="rgb(216,185,54)" fg:x="7272" fg:w="6"/><text x="94.5691%" y="431.50"></text></g><g><title>core::hash::Hasher::write_u8 (6 samples, 0.08%)</title><rect x="94.3191%" y="405" width="0.0778%" height="15" fill="rgb(254,217,39)" fg:x="7272" fg:w="6"/><text x="94.5691%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.08%)</title><rect x="94.3191%" y="389" width="0.0778%" height="15" fill="rgb(240,178,23)" fg:x="7272" fg:w="6"/><text x="94.5691%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.08%)</title><rect x="94.3191%" y="373" width="0.0778%" height="15" fill="rgb(218,11,47)" fg:x="7272" fg:w="6"/><text x="94.5691%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="94.3450%" y="357" width="0.0519%" height="15" fill="rgb(218,51,51)" fg:x="7274" fg:w="4"/><text x="94.5950%" y="367.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.01%)</title><rect x="94.3839%" y="341" width="0.0130%" height="15" fill="rgb(238,126,27)" fg:x="7277" fg:w="1"/><text x="94.6339%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (7 samples, 0.09%)</title><rect x="94.3969%" y="549" width="0.0908%" height="15" fill="rgb(249,202,22)" fg:x="7278" fg:w="7"/><text x="94.6469%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.04%)</title><rect x="94.6044%" y="469" width="0.0389%" height="15" fill="rgb(254,195,49)" fg:x="7294" fg:w="3"/><text x="94.8544%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (26 samples, 0.34%)</title><rect x="94.5006%" y="485" width="0.3372%" height="15" fill="rgb(208,123,14)" fg:x="7286" fg:w="26"/><text x="94.7506%" y="495.50"></text></g><g><title>core::hash::sip::u8to64_le (15 samples, 0.19%)</title><rect x="94.6433%" y="469" width="0.1946%" height="15" fill="rgb(224,200,8)" fg:x="7297" fg:w="15"/><text x="94.8933%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.04%)</title><rect x="94.7990%" y="453" width="0.0389%" height="15" fill="rgb(217,61,36)" fg:x="7309" fg:w="3"/><text x="95.0490%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (38 samples, 0.49%)</title><rect x="94.3969%" y="565" width="0.4929%" height="15" fill="rgb(206,35,45)" fg:x="7278" fg:w="38"/><text x="94.6469%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (31 samples, 0.40%)</title><rect x="94.4877%" y="549" width="0.4021%" height="15" fill="rgb(217,65,33)" fg:x="7285" fg:w="31"/><text x="94.7377%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (31 samples, 0.40%)</title><rect x="94.4877%" y="533" width="0.4021%" height="15" fill="rgb(222,158,48)" fg:x="7285" fg:w="31"/><text x="94.7377%" y="543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (31 samples, 0.40%)</title><rect x="94.4877%" y="517" width="0.4021%" height="15" fill="rgb(254,2,54)" fg:x="7285" fg:w="31"/><text x="94.7377%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (31 samples, 0.40%)</title><rect x="94.4877%" y="501" width="0.4021%" height="15" fill="rgb(250,143,38)" fg:x="7285" fg:w="31"/><text x="94.7377%" y="511.50"></text></g><g><title>core::hash::Hasher::write_u8 (4 samples, 0.05%)</title><rect x="94.8379%" y="485" width="0.0519%" height="15" fill="rgb(248,25,0)" fg:x="7312" fg:w="4"/><text x="95.0879%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.05%)</title><rect x="94.8379%" y="469" width="0.0519%" height="15" fill="rgb(206,152,27)" fg:x="7312" fg:w="4"/><text x="95.0879%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (52 samples, 0.67%)</title><rect x="94.2931%" y="629" width="0.6744%" height="15" fill="rgb(240,77,30)" fg:x="7270" fg:w="52"/><text x="94.5431%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (52 samples, 0.67%)</title><rect x="94.2931%" y="613" width="0.6744%" height="15" fill="rgb(231,5,3)" fg:x="7270" fg:w="52"/><text x="94.5431%" y="623.50"></text></g><g><title>core::hash::Hash::hash_slice (52 samples, 0.67%)</title><rect x="94.2931%" y="597" width="0.6744%" height="15" fill="rgb(207,226,32)" fg:x="7270" fg:w="52"/><text x="94.5431%" y="607.50"></text></g><g><title>&lt;topsnek::protocol::Snake as core::hash::Hash&gt;::hash (52 samples, 0.67%)</title><rect x="94.2931%" y="581" width="0.6744%" height="15" fill="rgb(222,207,47)" fg:x="7270" fg:w="52"/><text x="94.5431%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (6 samples, 0.08%)</title><rect x="94.8898%" y="565" width="0.0778%" height="15" fill="rgb(229,115,45)" fg:x="7316" fg:w="6"/><text x="95.1398%" y="575.50"></text></g><g><title>core::hash::Hasher::write_usize (6 samples, 0.08%)</title><rect x="94.8898%" y="549" width="0.0778%" height="15" fill="rgb(224,191,6)" fg:x="7316" fg:w="6"/><text x="95.1398%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.08%)</title><rect x="94.8898%" y="533" width="0.0778%" height="15" fill="rgb(230,227,24)" fg:x="7316" fg:w="6"/><text x="95.1398%" y="543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.08%)</title><rect x="94.8898%" y="517" width="0.0778%" height="15" fill="rgb(228,80,19)" fg:x="7316" fg:w="6"/><text x="95.1398%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.08%)</title><rect x="94.8898%" y="501" width="0.0778%" height="15" fill="rgb(247,229,0)" fg:x="7316" fg:w="6"/><text x="95.1398%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.08%)</title><rect x="94.8898%" y="485" width="0.0778%" height="15" fill="rgb(237,194,15)" fg:x="7316" fg:w="6"/><text x="95.1398%" y="495.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (5 samples, 0.06%)</title><rect x="94.9676%" y="613" width="0.0649%" height="15" fill="rgb(219,203,20)" fg:x="7322" fg:w="5"/><text x="95.2176%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (5 samples, 0.06%)</title><rect x="94.9676%" y="597" width="0.0649%" height="15" fill="rgb(234,128,8)" fg:x="7322" fg:w="5"/><text x="95.2176%" y="607.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (5 samples, 0.06%)</title><rect x="94.9676%" y="581" width="0.0649%" height="15" fill="rgb(248,202,8)" fg:x="7322" fg:w="5"/><text x="95.2176%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (5 samples, 0.06%)</title><rect x="94.9676%" y="565" width="0.0649%" height="15" fill="rgb(206,104,37)" fg:x="7322" fg:w="5"/><text x="95.2176%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5 samples, 0.06%)</title><rect x="94.9676%" y="549" width="0.0649%" height="15" fill="rgb(223,8,27)" fg:x="7322" fg:w="5"/><text x="95.2176%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.06%)</title><rect x="94.9676%" y="533" width="0.0649%" height="15" fill="rgb(216,217,28)" fg:x="7322" fg:w="5"/><text x="95.2176%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.06%)</title><rect x="94.9676%" y="517" width="0.0649%" height="15" fill="rgb(249,199,1)" fg:x="7322" fg:w="5"/><text x="95.2176%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.06%)</title><rect x="94.9676%" y="501" width="0.0649%" height="15" fill="rgb(240,85,17)" fg:x="7322" fg:w="5"/><text x="95.2176%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.06%)</title><rect x="94.9676%" y="485" width="0.0649%" height="15" fill="rgb(206,108,45)" fg:x="7322" fg:w="5"/><text x="95.2176%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.06%)</title><rect x="94.9676%" y="469" width="0.0649%" height="15" fill="rgb(245,210,41)" fg:x="7322" fg:w="5"/><text x="95.2176%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.06%)</title><rect x="94.9676%" y="453" width="0.0649%" height="15" fill="rgb(206,13,37)" fg:x="7322" fg:w="5"/><text x="95.2176%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.06%)</title><rect x="94.9676%" y="437" width="0.0649%" height="15" fill="rgb(250,61,18)" fg:x="7322" fg:w="5"/><text x="95.2176%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.06%)</title><rect x="94.9676%" y="421" width="0.0649%" height="15" fill="rgb(235,172,48)" fg:x="7322" fg:w="5"/><text x="95.2176%" y="431.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.06%)</title><rect x="94.9676%" y="405" width="0.0649%" height="15" fill="rgb(249,201,17)" fg:x="7322" fg:w="5"/><text x="95.2176%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (14 samples, 0.18%)</title><rect x="95.3696%" y="533" width="0.1816%" height="15" fill="rgb(219,208,6)" fg:x="7353" fg:w="14"/><text x="95.6196%" y="543.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (14 samples, 0.18%)</title><rect x="95.3696%" y="517" width="0.1816%" height="15" fill="rgb(248,31,23)" fg:x="7353" fg:w="14"/><text x="95.6196%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.18%)</title><rect x="95.3696%" y="501" width="0.1816%" height="15" fill="rgb(245,15,42)" fg:x="7353" fg:w="14"/><text x="95.6196%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (14 samples, 0.18%)</title><rect x="95.3696%" y="485" width="0.1816%" height="15" fill="rgb(222,217,39)" fg:x="7353" fg:w="14"/><text x="95.6196%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.18%)</title><rect x="95.3696%" y="469" width="0.1816%" height="15" fill="rgb(210,219,27)" fg:x="7353" fg:w="14"/><text x="95.6196%" y="479.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (24 samples, 0.31%)</title><rect x="95.3696%" y="549" width="0.3113%" height="15" fill="rgb(252,166,36)" fg:x="7353" fg:w="24"/><text x="95.6196%" y="559.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (10 samples, 0.13%)</title><rect x="95.5512%" y="533" width="0.1297%" height="15" fill="rgb(245,132,34)" fg:x="7367" fg:w="10"/><text x="95.8012%" y="543.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.06%)</title><rect x="96.7056%" y="357" width="0.0649%" height="15" fill="rgb(236,54,3)" fg:x="7456" fg:w="5"/><text x="96.9556%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (6 samples, 0.08%)</title><rect x="96.7704%" y="357" width="0.0778%" height="15" fill="rgb(241,173,43)" fg:x="7461" fg:w="6"/><text x="97.0204%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;T,F&gt; as core::ops::try_trait::FromResidual&lt;core::result::Result&lt;core::convert::Infallible,E&gt;&gt;&gt;::from_residual (4 samples, 0.05%)</title><rect x="96.9780%" y="341" width="0.0519%" height="15" fill="rgb(215,190,9)" fg:x="7477" fg:w="4"/><text x="97.2280%" y="351.50"></text></g><g><title>__rdl_alloc (5 samples, 0.06%)</title><rect x="97.0298%" y="341" width="0.0649%" height="15" fill="rgb(242,101,16)" fg:x="7481" fg:w="5"/><text x="97.2798%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.05%)</title><rect x="97.0428%" y="325" width="0.0519%" height="15" fill="rgb(223,190,21)" fg:x="7482" fg:w="4"/><text x="97.2928%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (12 samples, 0.16%)</title><rect x="97.0947%" y="341" width="0.1556%" height="15" fill="rgb(215,228,25)" fg:x="7486" fg:w="12"/><text x="97.3447%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (36 samples, 0.47%)</title><rect x="96.8482%" y="357" width="0.4669%" height="15" fill="rgb(225,36,22)" fg:x="7467" fg:w="36"/><text x="97.0982%" y="367.50"></text></g><g><title>rust_oom (5 samples, 0.06%)</title><rect x="97.2503%" y="341" width="0.0649%" height="15" fill="rgb(251,106,46)" fg:x="7498" fg:w="5"/><text x="97.5003%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (90 samples, 1.17%)</title><rect x="96.1868%" y="517" width="1.1673%" height="15" fill="rgb(208,90,1)" fg:x="7416" fg:w="90"/><text x="96.4368%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (76 samples, 0.99%)</title><rect x="96.3684%" y="501" width="0.9857%" height="15" fill="rgb(243,10,4)" fg:x="7430" fg:w="76"/><text x="96.6184%" y="511.50"></text></g><g><title>alloc::string::String::push_str (76 samples, 0.99%)</title><rect x="96.3684%" y="485" width="0.9857%" height="15" fill="rgb(212,137,27)" fg:x="7430" fg:w="76"/><text x="96.6184%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (76 samples, 0.99%)</title><rect x="96.3684%" y="469" width="0.9857%" height="15" fill="rgb(231,220,49)" fg:x="7430" fg:w="76"/><text x="96.6184%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (76 samples, 0.99%)</title><rect x="96.3684%" y="453" width="0.9857%" height="15" fill="rgb(237,96,20)" fg:x="7430" fg:w="76"/><text x="96.6184%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (76 samples, 0.99%)</title><rect x="96.3684%" y="437" width="0.9857%" height="15" fill="rgb(239,229,30)" fg:x="7430" fg:w="76"/><text x="96.6184%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (67 samples, 0.87%)</title><rect x="96.4851%" y="421" width="0.8690%" height="15" fill="rgb(219,65,33)" fg:x="7439" fg:w="67"/><text x="96.7351%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (64 samples, 0.83%)</title><rect x="96.5240%" y="405" width="0.8301%" height="15" fill="rgb(243,134,7)" fg:x="7442" fg:w="64"/><text x="96.7740%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (64 samples, 0.83%)</title><rect x="96.5240%" y="389" width="0.8301%" height="15" fill="rgb(216,177,54)" fg:x="7442" fg:w="64"/><text x="96.7740%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (61 samples, 0.79%)</title><rect x="96.5629%" y="373" width="0.7912%" height="15" fill="rgb(211,160,20)" fg:x="7445" fg:w="61"/><text x="96.8129%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (3 samples, 0.04%)</title><rect x="97.3152%" y="357" width="0.0389%" height="15" fill="rgb(239,85,39)" fg:x="7503" fg:w="3"/><text x="97.5652%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="97.3541%" y="517" width="0.0259%" height="15" fill="rgb(232,125,22)" fg:x="7506" fg:w="2"/><text x="97.6041%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="97.3541%" y="501" width="0.0259%" height="15" fill="rgb(244,57,34)" fg:x="7506" fg:w="2"/><text x="97.6041%" y="511.50"></text></g><g><title>&lt;topsnek::logic::Tile as core::fmt::Display&gt;::fmt (21 samples, 0.27%)</title><rect x="97.3800%" y="517" width="0.2724%" height="15" fill="rgb(214,203,32)" fg:x="7508" fg:w="21"/><text x="97.6300%" y="527.50"></text></g><g><title>core::fmt::Formatter::new (6 samples, 0.08%)</title><rect x="97.6524%" y="517" width="0.0778%" height="15" fill="rgb(207,58,43)" fg:x="7529" fg:w="6"/><text x="97.9024%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (4 samples, 0.05%)</title><rect x="97.7302%" y="517" width="0.0519%" height="15" fill="rgb(215,193,15)" fg:x="7535" fg:w="4"/><text x="97.9802%" y="527.50"></text></g><g><title>alloc::fmt::format (231 samples, 3.00%)</title><rect x="95.0324%" y="613" width="2.9961%" height="15" fill="rgb(232,15,44)" fg:x="7327" fg:w="231"/><text x="95.2824%" y="623.50">all..</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (231 samples, 3.00%)</title><rect x="95.0324%" y="597" width="2.9961%" height="15" fill="rgb(212,3,48)" fg:x="7327" fg:w="231"/><text x="95.2824%" y="607.50">cor..</text></g><g><title>alloc::fmt::format::{{closure}} (231 samples, 3.00%)</title><rect x="95.0324%" y="581" width="2.9961%" height="15" fill="rgb(218,128,7)" fg:x="7327" fg:w="231"/><text x="95.2824%" y="591.50">all..</text></g><g><title>alloc::fmt::format::format_inner (219 samples, 2.84%)</title><rect x="95.1881%" y="565" width="2.8405%" height="15" fill="rgb(226,216,39)" fg:x="7339" fg:w="219"/><text x="95.4381%" y="575.50">al..</text></g><g><title>core::fmt::Write::write_fmt (181 samples, 2.35%)</title><rect x="95.6809%" y="549" width="2.3476%" height="15" fill="rgb(243,47,51)" fg:x="7377" fg:w="181"/><text x="95.9309%" y="559.50">c..</text></g><g><title>core::fmt::write (162 samples, 2.10%)</title><rect x="95.9274%" y="533" width="2.1012%" height="15" fill="rgb(241,183,40)" fg:x="7396" fg:w="162"/><text x="96.1774%" y="543.50">c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (19 samples, 0.25%)</title><rect x="97.7821%" y="517" width="0.2464%" height="15" fill="rgb(231,217,32)" fg:x="7539" fg:w="19"/><text x="98.0321%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (19 samples, 0.25%)</title><rect x="97.7821%" y="501" width="0.2464%" height="15" fill="rgb(229,61,38)" fg:x="7539" fg:w="19"/><text x="98.0321%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="98.1323%" y="501" width="0.0130%" height="15" fill="rgb(225,210,5)" fg:x="7566" fg:w="1"/><text x="98.3823%" y="511.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.01%)</title><rect x="98.1323%" y="485" width="0.0130%" height="15" fill="rgb(231,79,45)" fg:x="7566" fg:w="1"/><text x="98.3823%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="98.1323%" y="469" width="0.0130%" height="15" fill="rgb(224,100,7)" fg:x="7566" fg:w="1"/><text x="98.3823%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (9 samples, 0.12%)</title><rect x="98.0674%" y="565" width="0.1167%" height="15" fill="rgb(241,198,18)" fg:x="7561" fg:w="9"/><text x="98.3174%" y="575.50"></text></g><g><title>alloc::str::join_generic_copy::{{closure}} (9 samples, 0.12%)</title><rect x="98.0674%" y="549" width="0.1167%" height="15" fill="rgb(252,97,53)" fg:x="7561" fg:w="9"/><text x="98.3174%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.12%)</title><rect x="98.0674%" y="533" width="0.1167%" height="15" fill="rgb(220,88,7)" fg:x="7561" fg:w="9"/><text x="98.3174%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (9 samples, 0.12%)</title><rect x="98.0674%" y="517" width="0.1167%" height="15" fill="rgb(213,176,14)" fg:x="7561" fg:w="9"/><text x="98.3174%" y="527.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (3 samples, 0.04%)</title><rect x="98.1453%" y="501" width="0.0389%" height="15" fill="rgb(246,73,7)" fg:x="7567" fg:w="3"/><text x="98.3953%" y="511.50"></text></g><g><title>core::ops::function::FnMut::call_mut (3 samples, 0.04%)</title><rect x="98.1453%" y="485" width="0.0389%" height="15" fill="rgb(245,64,36)" fg:x="7567" fg:w="3"/><text x="98.3953%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.04%)</title><rect x="98.1453%" y="469" width="0.0389%" height="15" fill="rgb(245,80,10)" fg:x="7567" fg:w="3"/><text x="98.3953%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.04%)</title><rect x="98.1453%" y="453" width="0.0389%" height="15" fill="rgb(232,107,50)" fg:x="7567" fg:w="3"/><text x="98.3953%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4 samples, 0.05%)</title><rect x="98.1842%" y="565" width="0.0519%" height="15" fill="rgb(253,3,0)" fg:x="7570" fg:w="4"/><text x="98.4342%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.05%)</title><rect x="98.1842%" y="549" width="0.0519%" height="15" fill="rgb(212,99,53)" fg:x="7570" fg:w="4"/><text x="98.4342%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::join (21 samples, 0.27%)</title><rect x="98.0285%" y="613" width="0.2724%" height="15" fill="rgb(249,111,54)" fg:x="7558" fg:w="21"/><text x="98.2785%" y="623.50"></text></g><g><title>alloc::str::&lt;impl alloc::slice::Join&lt;&amp;str&gt; for [S]&gt;::join (21 samples, 0.27%)</title><rect x="98.0285%" y="597" width="0.2724%" height="15" fill="rgb(249,55,30)" fg:x="7558" fg:w="21"/><text x="98.2785%" y="607.50"></text></g><g><title>alloc::str::join_generic_copy (21 samples, 0.27%)</title><rect x="98.0285%" y="581" width="0.2724%" height="15" fill="rgb(237,47,42)" fg:x="7558" fg:w="21"/><text x="98.2785%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (5 samples, 0.06%)</title><rect x="98.2361%" y="565" width="0.0649%" height="15" fill="rgb(211,20,18)" fg:x="7574" fg:w="5"/><text x="98.4861%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.01%)</title><rect x="98.3009%" y="565" width="0.0130%" height="15" fill="rgb(231,203,46)" fg:x="7579" fg:w="1"/><text x="98.5509%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="98.3139%" y="565" width="0.0259%" height="15" fill="rgb(237,142,3)" fg:x="7580" fg:w="2"/><text x="98.5639%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.03%)</title><rect x="98.3139%" y="549" width="0.0259%" height="15" fill="rgb(241,107,1)" fg:x="7580" fg:w="2"/><text x="98.5639%" y="559.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.03%)</title><rect x="98.3139%" y="533" width="0.0259%" height="15" fill="rgb(229,83,13)" fg:x="7580" fg:w="2"/><text x="98.5639%" y="543.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.03%)</title><rect x="98.3139%" y="517" width="0.0259%" height="15" fill="rgb(241,91,40)" fg:x="7580" fg:w="2"/><text x="98.5639%" y="527.50"></text></g><g><title>__rdl_realloc (1 samples, 0.01%)</title><rect x="98.3268%" y="501" width="0.0130%" height="15" fill="rgb(225,3,45)" fg:x="7581" fg:w="1"/><text x="98.5768%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.01%)</title><rect x="98.3268%" y="485" width="0.0130%" height="15" fill="rgb(244,223,14)" fg:x="7581" fg:w="1"/><text x="98.5768%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.05%)</title><rect x="98.3009%" y="613" width="0.0519%" height="15" fill="rgb(224,124,37)" fg:x="7579" fg:w="4"/><text x="98.5509%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.05%)</title><rect x="98.3009%" y="597" width="0.0519%" height="15" fill="rgb(251,171,30)" fg:x="7579" fg:w="4"/><text x="98.5509%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.05%)</title><rect x="98.3009%" y="581" width="0.0519%" height="15" fill="rgb(236,46,54)" fg:x="7579" fg:w="4"/><text x="98.5509%" y="591.50"></text></g><g><title>core::cmp::max (1 samples, 0.01%)</title><rect x="98.3398%" y="565" width="0.0130%" height="15" fill="rgb(245,213,5)" fg:x="7582" fg:w="1"/><text x="98.5898%" y="575.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.01%)</title><rect x="98.3398%" y="549" width="0.0130%" height="15" fill="rgb(230,144,27)" fg:x="7582" fg:w="1"/><text x="98.5898%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (1 samples, 0.01%)</title><rect x="98.3528%" y="613" width="0.0130%" height="15" fill="rgb(220,86,6)" fg:x="7583" fg:w="1"/><text x="98.6028%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="98.3528%" y="597" width="0.0130%" height="15" fill="rgb(240,20,13)" fg:x="7583" fg:w="1"/><text x="98.6028%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (1 samples, 0.01%)</title><rect x="98.3528%" y="581" width="0.0130%" height="15" fill="rgb(217,89,34)" fg:x="7583" fg:w="1"/><text x="98.6028%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.01%)</title><rect x="98.3528%" y="565" width="0.0130%" height="15" fill="rgb(229,13,5)" fg:x="7583" fg:w="1"/><text x="98.6028%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="98.3528%" y="549" width="0.0130%" height="15" fill="rgb(244,67,35)" fg:x="7583" fg:w="1"/><text x="98.6028%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.01%)</title><rect x="98.3528%" y="533" width="0.0130%" height="15" fill="rgb(221,40,2)" fg:x="7583" fg:w="1"/><text x="98.6028%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="98.3528%" y="517" width="0.0130%" height="15" fill="rgb(237,157,21)" fg:x="7583" fg:w="1"/><text x="98.6028%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="98.3528%" y="501" width="0.0130%" height="15" fill="rgb(222,94,11)" fg:x="7583" fg:w="1"/><text x="98.6028%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="98.3528%" y="485" width="0.0130%" height="15" fill="rgb(249,113,6)" fg:x="7583" fg:w="1"/><text x="98.6028%" y="495.50"></text></g><g><title>&lt;topsnek::logic::board::Board as alloc::string::ToString&gt;::to_string (338 samples, 4.38%)</title><rect x="94.9676%" y="629" width="4.3839%" height="15" fill="rgb(238,137,36)" fg:x="7322" fg:w="338"/><text x="95.2176%" y="639.50">&lt;tops..</text></g><g><title>topsnek::logic::board::Board::get (76 samples, 0.99%)</title><rect x="98.3658%" y="613" width="0.9857%" height="15" fill="rgb(210,102,26)" fg:x="7584" fg:w="76"/><text x="98.6158%" y="623.50"></text></g><g><title>&lt;topsnek::protocol::Snake as core::hash::Hash&gt;::hash (2 samples, 0.03%)</title><rect x="99.3515%" y="629" width="0.0259%" height="15" fill="rgb(218,30,30)" fg:x="7660" fg:w="2"/><text x="99.6015%" y="639.50"></text></g><g><title>&lt;topsnek::protocol::Customizations as core::hash::Hash&gt;::hash (2 samples, 0.03%)</title><rect x="99.3515%" y="613" width="0.0259%" height="15" fill="rgb(214,67,26)" fg:x="7660" fg:w="2"/><text x="99.6015%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (2 samples, 0.03%)</title><rect x="99.3515%" y="597" width="0.0259%" height="15" fill="rgb(251,9,53)" fg:x="7660" fg:w="2"/><text x="99.6015%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2 samples, 0.03%)</title><rect x="99.3515%" y="581" width="0.0259%" height="15" fill="rgb(228,204,25)" fg:x="7660" fg:w="2"/><text x="99.6015%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (2 samples, 0.03%)</title><rect x="99.3515%" y="565" width="0.0259%" height="15" fill="rgb(207,153,8)" fg:x="7660" fg:w="2"/><text x="99.6015%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2 samples, 0.03%)</title><rect x="99.3515%" y="549" width="0.0259%" height="15" fill="rgb(242,9,16)" fg:x="7660" fg:w="2"/><text x="99.6015%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2 samples, 0.03%)</title><rect x="99.3515%" y="533" width="0.0259%" height="15" fill="rgb(217,211,10)" fg:x="7660" fg:w="2"/><text x="99.6015%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.03%)</title><rect x="99.3515%" y="517" width="0.0259%" height="15" fill="rgb(219,228,52)" fg:x="7660" fg:w="2"/><text x="99.6015%" y="527.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.03%)</title><rect x="99.3515%" y="501" width="0.0259%" height="15" fill="rgb(231,92,29)" fg:x="7660" fg:w="2"/><text x="99.6015%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.03%)</title><rect x="99.3515%" y="485" width="0.0259%" height="15" fill="rgb(232,8,23)" fg:x="7660" fg:w="2"/><text x="99.6015%" y="495.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (398 samples, 5.16%)</title><rect x="94.2283%" y="677" width="5.1621%" height="15" fill="rgb(216,211,34)" fg:x="7265" fg:w="398"/><text x="94.4783%" y="687.50">indexm..</text></g><g><title>&lt;topsnek::snakes::spaceheater::game_solver::WorkItem as core::hash::Hash&gt;::hash (398 samples, 5.16%)</title><rect x="94.2283%" y="661" width="5.1621%" height="15" fill="rgb(236,151,0)" fg:x="7265" fg:w="398"/><text x="94.4783%" y="671.50">&lt;topsn..</text></g><g><title>&lt;topsnek::logic::game::Game as core::hash::Hash&gt;::hash (395 samples, 5.12%)</title><rect x="94.2672%" y="645" width="5.1232%" height="15" fill="rgb(209,168,3)" fg:x="7268" fg:w="395"/><text x="94.5172%" y="655.50">&lt;topsn..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.01%)</title><rect x="99.3774%" y="629" width="0.0130%" height="15" fill="rgb(208,129,28)" fg:x="7662" fg:w="1"/><text x="99.6274%" y="639.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="99.3774%" y="613" width="0.0130%" height="15" fill="rgb(229,78,22)" fg:x="7662" fg:w="1"/><text x="99.6274%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="99.3774%" y="597" width="0.0130%" height="15" fill="rgb(228,187,13)" fg:x="7662" fg:w="1"/><text x="99.6274%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="99.3774%" y="581" width="0.0130%" height="15" fill="rgb(240,119,24)" fg:x="7662" fg:w="1"/><text x="99.6274%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="99.3774%" y="565" width="0.0130%" height="15" fill="rgb(209,194,42)" fg:x="7662" fg:w="1"/><text x="99.6274%" y="575.50"></text></g><g><title>&lt;topsnek::logic::game::Game as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="99.4163%" y="565" width="0.0130%" height="15" fill="rgb(247,200,46)" fg:x="7665" fg:w="1"/><text x="99.6663%" y="575.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1 samples, 0.01%)</title><rect x="99.4163%" y="549" width="0.0130%" height="15" fill="rgb(218,76,16)" fg:x="7665" fg:w="1"/><text x="99.6663%" y="559.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.01%)</title><rect x="99.4163%" y="533" width="0.0130%" height="15" fill="rgb(225,21,48)" fg:x="7665" fg:w="1"/><text x="99.6663%" y="543.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.01%)</title><rect x="99.4163%" y="517" width="0.0130%" height="15" fill="rgb(239,223,50)" fg:x="7665" fg:w="1"/><text x="99.6663%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (1 samples, 0.01%)</title><rect x="99.4163%" y="501" width="0.0130%" height="15" fill="rgb(244,45,21)" fg:x="7665" fg:w="1"/><text x="99.6663%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.01%)</title><rect x="99.4163%" y="485" width="0.0130%" height="15" fill="rgb(232,33,43)" fg:x="7665" fg:w="1"/><text x="99.6663%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (1 samples, 0.01%)</title><rect x="99.4163%" y="469" width="0.0130%" height="15" fill="rgb(209,8,3)" fg:x="7665" fg:w="1"/><text x="99.6663%" y="479.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::{{closure}} (1 samples, 0.01%)</title><rect x="99.4163%" y="453" width="0.0130%" height="15" fill="rgb(214,25,53)" fg:x="7665" fg:w="1"/><text x="99.6663%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.01%)</title><rect x="99.4163%" y="437" width="0.0130%" height="15" fill="rgb(254,186,54)" fg:x="7665" fg:w="1"/><text x="99.6663%" y="447.50"></text></g><g><title>&lt;topsnek::protocol::Snake as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="99.4163%" y="421" width="0.0130%" height="15" fill="rgb(208,174,49)" fg:x="7665" fg:w="1"/><text x="99.6663%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (4 samples, 0.05%)</title><rect x="99.3904%" y="629" width="0.0519%" height="15" fill="rgb(233,191,51)" fg:x="7663" fg:w="4"/><text x="99.6404%" y="639.50"></text></g><g><title>indexmap::map::core::equivalent::{{closure}} (2 samples, 0.03%)</title><rect x="99.4163%" y="613" width="0.0259%" height="15" fill="rgb(222,134,10)" fg:x="7665" fg:w="2"/><text x="99.6663%" y="623.50"></text></g><g><title>&lt;Q as indexmap::equivalent::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.03%)</title><rect x="99.4163%" y="597" width="0.0259%" height="15" fill="rgb(230,226,20)" fg:x="7665" fg:w="2"/><text x="99.6663%" y="607.50"></text></g><g><title>&lt;topsnek::snakes::spaceheater::game_solver::WorkItem as core::cmp::PartialEq&gt;::eq (2 samples, 0.03%)</title><rect x="99.4163%" y="581" width="0.0259%" height="15" fill="rgb(251,111,25)" fg:x="7665" fg:w="2"/><text x="99.6663%" y="591.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1 samples, 0.01%)</title><rect x="99.4293%" y="565" width="0.0130%" height="15" fill="rgb(224,40,46)" fg:x="7666" fg:w="1"/><text x="99.6793%" y="575.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.01%)</title><rect x="99.4293%" y="549" width="0.0130%" height="15" fill="rgb(236,108,47)" fg:x="7666" fg:w="1"/><text x="99.6793%" y="559.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.01%)</title><rect x="99.4293%" y="533" width="0.0130%" height="15" fill="rgb(234,93,0)" fg:x="7666" fg:w="1"/><text x="99.6793%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (1 samples, 0.01%)</title><rect x="99.4293%" y="517" width="0.0130%" height="15" fill="rgb(224,213,32)" fg:x="7666" fg:w="1"/><text x="99.6793%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.01%)</title><rect x="99.4293%" y="501" width="0.0130%" height="15" fill="rgb(251,11,48)" fg:x="7666" fg:w="1"/><text x="99.6793%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (1 samples, 0.01%)</title><rect x="99.4293%" y="485" width="0.0130%" height="15" fill="rgb(236,173,5)" fg:x="7666" fg:w="1"/><text x="99.6793%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::{{closure}} (1 samples, 0.01%)</title><rect x="99.4293%" y="469" width="0.0130%" height="15" fill="rgb(230,95,12)" fg:x="7666" fg:w="1"/><text x="99.6793%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.01%)</title><rect x="99.4293%" y="453" width="0.0130%" height="15" fill="rgb(232,209,1)" fg:x="7666" fg:w="1"/><text x="99.6793%" y="463.50"></text></g><g><title>&lt;topsnek::protocol::Direction as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="99.4293%" y="437" width="0.0130%" height="15" fill="rgb(232,6,1)" fg:x="7666" fg:w="1"/><text x="99.6793%" y="447.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::entry (409 samples, 5.30%)</title><rect x="94.2283%" y="693" width="5.3048%" height="15" fill="rgb(210,224,50)" fg:x="7265" fg:w="409"/><text x="94.4783%" y="703.50">indexm..</text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (11 samples, 0.14%)</title><rect x="99.3904%" y="677" width="0.1427%" height="15" fill="rgb(228,127,35)" fg:x="7663" fg:w="11"/><text x="99.6404%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (11 samples, 0.14%)</title><rect x="99.3904%" y="661" width="0.1427%" height="15" fill="rgb(245,102,45)" fg:x="7663" fg:w="11"/><text x="99.6404%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (11 samples, 0.14%)</title><rect x="99.3904%" y="645" width="0.1427%" height="15" fill="rgb(214,1,49)" fg:x="7663" fg:w="11"/><text x="99.6404%" y="655.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (7 samples, 0.09%)</title><rect x="99.4423%" y="629" width="0.0908%" height="15" fill="rgb(226,163,40)" fg:x="7667" fg:w="7"/><text x="99.6923%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (7 samples, 0.09%)</title><rect x="99.4423%" y="613" width="0.0908%" height="15" fill="rgb(239,212,28)" fg:x="7667" fg:w="7"/><text x="99.6923%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.09%)</title><rect x="99.4423%" y="597" width="0.0908%" height="15" fill="rgb(220,20,13)" fg:x="7667" fg:w="7"/><text x="99.6923%" y="607.50"></text></g><g><title>indexmap::map::core::VacantEntry&lt;K,V&gt;::insert (10 samples, 0.13%)</title><rect x="99.5331%" y="693" width="0.1297%" height="15" fill="rgb(210,164,35)" fg:x="7674" fg:w="10"/><text x="99.7831%" y="703.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push (10 samples, 0.13%)</title><rect x="99.5331%" y="677" width="0.1297%" height="15" fill="rgb(248,109,41)" fg:x="7674" fg:w="10"/><text x="99.7831%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (10 samples, 0.13%)</title><rect x="99.5331%" y="661" width="0.1297%" height="15" fill="rgb(238,23,50)" fg:x="7674" fg:w="10"/><text x="99.7831%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (10 samples, 0.13%)</title><rect x="99.5331%" y="645" width="0.1297%" height="15" fill="rgb(211,48,49)" fg:x="7674" fg:w="10"/><text x="99.7831%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (10 samples, 0.13%)</title><rect x="99.5331%" y="629" width="0.1297%" height="15" fill="rgb(223,36,21)" fg:x="7674" fg:w="10"/><text x="99.7831%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (10 samples, 0.13%)</title><rect x="99.5331%" y="613" width="0.1297%" height="15" fill="rgb(207,123,46)" fg:x="7674" fg:w="10"/><text x="99.7831%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (10 samples, 0.13%)</title><rect x="99.5331%" y="597" width="0.1297%" height="15" fill="rgb(240,218,32)" fg:x="7674" fg:w="10"/><text x="99.7831%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (10 samples, 0.13%)</title><rect x="99.5331%" y="581" width="0.1297%" height="15" fill="rgb(252,5,43)" fg:x="7674" fg:w="10"/><text x="99.7831%" y="591.50"></text></g><g><title>indexmap::map::core::get_hash::{{closure}} (10 samples, 0.13%)</title><rect x="99.5331%" y="565" width="0.1297%" height="15" fill="rgb(252,84,19)" fg:x="7674" fg:w="10"/><text x="99.7831%" y="575.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::bubble_up (4 samples, 0.05%)</title><rect x="99.6628%" y="693" width="0.0519%" height="15" fill="rgb(243,152,39)" fg:x="7684" fg:w="4"/><text x="99.9128%" y="703.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::bubble_up (1 samples, 0.01%)</title><rect x="99.7147%" y="677" width="0.0130%" height="15" fill="rgb(234,160,15)" fg:x="7688" fg:w="1"/><text x="99.9647%" y="687.50"></text></g><g><title>topsnek::util::workqueue::WorkQueue&lt;W,P&gt;::done (428 samples, 5.55%)</title><rect x="94.1894%" y="725" width="5.5512%" height="15" fill="rgb(237,34,20)" fg:x="7262" fg:w="428"/><text x="94.4394%" y="735.50">topsnek..</text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (426 samples, 5.53%)</title><rect x="94.2153%" y="709" width="5.5253%" height="15" fill="rgb(229,97,13)" fg:x="7264" fg:w="426"/><text x="94.4653%" y="719.50">priorit..</text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::up_heapify (2 samples, 0.03%)</title><rect x="99.7147%" y="693" width="0.0259%" height="15" fill="rgb(234,71,50)" fg:x="7688" fg:w="2"/><text x="99.9647%" y="703.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (1 samples, 0.01%)</title><rect x="99.7276%" y="677" width="0.0130%" height="15" fill="rgb(253,155,4)" fg:x="7689" fg:w="1"/><text x="99.9776%" y="687.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::len (1 samples, 0.01%)</title><rect x="99.7536%" y="677" width="0.0130%" height="15" fill="rgb(222,185,37)" fg:x="7691" fg:w="1"/><text x="100.0036%" y="687.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (4 samples, 0.05%)</title><rect x="99.7406%" y="693" width="0.0519%" height="15" fill="rgb(251,177,13)" fg:x="7690" fg:w="4"/><text x="99.9906%" y="703.50"></text></g><g><title>priority_queue::store::Store&lt;I,P,H&gt;::swap (2 samples, 0.03%)</title><rect x="99.7665%" y="677" width="0.0259%" height="15" fill="rgb(250,179,40)" fg:x="7692" fg:w="2"/><text x="100.0165%" y="687.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (2 samples, 0.03%)</title><rect x="99.7665%" y="661" width="0.0259%" height="15" fill="rgb(242,44,2)" fg:x="7692" fg:w="2"/><text x="100.0165%" y="671.50"></text></g><g><title>core::ptr::swap (2 samples, 0.03%)</title><rect x="99.7665%" y="645" width="0.0259%" height="15" fill="rgb(216,177,13)" fg:x="7692" fg:w="2"/><text x="100.0165%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::swap_remove (1 samples, 0.01%)</title><rect x="99.8314%" y="677" width="0.0130%" height="15" fill="rgb(216,106,43)" fg:x="7697" fg:w="1"/><text x="100.0814%" y="687.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_finish (7 samples, 0.09%)</title><rect x="99.8444%" y="645" width="0.0908%" height="15" fill="rgb(216,183,2)" fg:x="7698" fg:w="7"/><text x="100.0944%" y="655.50"></text></g><g><title>indexmap::map::core::update_index (7 samples, 0.09%)</title><rect x="99.8444%" y="629" width="0.0908%" height="15" fill="rgb(249,75,3)" fg:x="7698" fg:w="7"/><text x="100.0944%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get_mut (7 samples, 0.09%)</title><rect x="99.8444%" y="613" width="0.0908%" height="15" fill="rgb(219,67,39)" fg:x="7698" fg:w="7"/><text x="100.0944%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (7 samples, 0.09%)</title><rect x="99.8444%" y="597" width="0.0908%" height="15" fill="rgb(253,228,2)" fg:x="7698" fg:w="7"/><text x="100.0944%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (7 samples, 0.09%)</title><rect x="99.8444%" y="581" width="0.0908%" height="15" fill="rgb(235,138,27)" fg:x="7698" fg:w="7"/><text x="100.0944%" y="591.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (2 samples, 0.03%)</title><rect x="99.9092%" y="565" width="0.0259%" height="15" fill="rgb(236,97,51)" fg:x="7703" fg:w="2"/><text x="100.1592%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.03%)</title><rect x="99.9092%" y="549" width="0.0259%" height="15" fill="rgb(240,80,30)" fg:x="7703" fg:w="2"/><text x="100.1592%" y="559.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::pop (19 samples, 0.25%)</title><rect x="99.7406%" y="709" width="0.2464%" height="15" fill="rgb(230,178,19)" fg:x="7690" fg:w="19"/><text x="99.9906%" y="719.50"></text></g><g><title>priority_queue::store::Store&lt;I,P,H&gt;::swap_remove (15 samples, 0.19%)</title><rect x="99.7925%" y="693" width="0.1946%" height="15" fill="rgb(210,190,27)" fg:x="7694" fg:w="15"/><text x="100.0425%" y="703.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::swap_remove_index (11 samples, 0.14%)</title><rect x="99.8444%" y="677" width="0.1427%" height="15" fill="rgb(222,107,31)" fg:x="7698" fg:w="11"/><text x="100.0944%" y="687.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (11 samples, 0.14%)</title><rect x="99.8444%" y="661" width="0.1427%" height="15" fill="rgb(216,127,34)" fg:x="7698" fg:w="11"/><text x="100.0944%" y="671.50"></text></g><g><title>indexmap::map::core::erase_index (4 samples, 0.05%)</title><rect x="99.9351%" y="645" width="0.0519%" height="15" fill="rgb(234,116,52)" fg:x="7705" fg:w="4"/><text x="100.1851%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::erase_entry (4 samples, 0.05%)</title><rect x="99.9351%" y="629" width="0.0519%" height="15" fill="rgb(222,124,15)" fg:x="7705" fg:w="4"/><text x="100.1851%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (4 samples, 0.05%)</title><rect x="99.9351%" y="613" width="0.0519%" height="15" fill="rgb(231,179,28)" fg:x="7705" fg:w="4"/><text x="100.1851%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (4 samples, 0.05%)</title><rect x="99.9351%" y="597" width="0.0519%" height="15" fill="rgb(226,93,45)" fg:x="7705" fg:w="4"/><text x="100.1851%" y="607.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (2 samples, 0.03%)</title><rect x="99.9611%" y="581" width="0.0259%" height="15" fill="rgb(215,8,51)" fg:x="7707" fg:w="2"/><text x="100.2111%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.03%)</title><rect x="99.9611%" y="565" width="0.0259%" height="15" fill="rgb(223,106,5)" fg:x="7707" fg:w="2"/><text x="100.2111%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.03%)</title><rect x="99.9611%" y="549" width="0.0259%" height="15" fill="rgb(250,191,5)" fg:x="7707" fg:w="2"/><text x="100.2111%" y="559.50"></text></g><g><title>all (7,710 samples, 100%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(242,132,44)" fg:x="0" fg:w="7710"/><text x="0.2500%" y="975.50"></text></g><g><title>bench-spaceheat (7,710 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(251,152,29)" fg:x="0" fg:w="7710"/><text x="0.2500%" y="959.50">bench-spaceheat</text></g><g><title>start_thread (7,708 samples, 99.97%)</title><rect x="0.0259%" y="933" width="99.9741%" height="15" fill="rgb(218,179,5)" fg:x="2" fg:w="7708"/><text x="0.2759%" y="943.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (7,708 samples, 99.97%)</title><rect x="0.0259%" y="917" width="99.9741%" height="15" fill="rgb(227,67,19)" fg:x="2" fg:w="7708"/><text x="0.2759%" y="927.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (7,708 samples, 99.97%)</title><rect x="0.0259%" y="901" width="99.9741%" height="15" fill="rgb(233,119,31)" fg:x="2" fg:w="7708"/><text x="0.2759%" y="911.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (7,708 samples, 99.97%)</title><rect x="0.0259%" y="885" width="99.9741%" height="15" fill="rgb(241,120,22)" fg:x="2" fg:w="7708"/><text x="0.2759%" y="895.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (7,708 samples, 99.97%)</title><rect x="0.0259%" y="869" width="99.9741%" height="15" fill="rgb(224,102,30)" fg:x="2" fg:w="7708"/><text x="0.2759%" y="879.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (7,708 samples, 99.97%)</title><rect x="0.0259%" y="853" width="99.9741%" height="15" fill="rgb(210,164,37)" fg:x="2" fg:w="7708"/><text x="0.2759%" y="863.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (7,708 samples, 99.97%)</title><rect x="0.0259%" y="837" width="99.9741%" height="15" fill="rgb(226,191,16)" fg:x="2" fg:w="7708"/><text x="0.2759%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (7,708 samples, 99.97%)</title><rect x="0.0259%" y="821" width="99.9741%" height="15" fill="rgb(214,40,45)" fg:x="2" fg:w="7708"/><text x="0.2759%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (7,708 samples, 99.97%)</title><rect x="0.0259%" y="805" width="99.9741%" height="15" fill="rgb(244,29,26)" fg:x="2" fg:w="7708"/><text x="0.2759%" y="815.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,708 samples, 99.97%)</title><rect x="0.0259%" y="789" width="99.9741%" height="15" fill="rgb(216,16,5)" fg:x="2" fg:w="7708"/><text x="0.2759%" y="799.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (7,708 samples, 99.97%)</title><rect x="0.0259%" y="773" width="99.9741%" height="15" fill="rgb(249,76,35)" fg:x="2" fg:w="7708"/><text x="0.2759%" y="783.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7,708 samples, 99.97%)</title><rect x="0.0259%" y="757" width="99.9741%" height="15" fill="rgb(207,11,44)" fg:x="2" fg:w="7708"/><text x="0.2759%" y="767.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>topsnek::snakes::spaceheater::game_solver::GameSolver&lt;T&gt;::solve::{{closure}} (7,708 samples, 99.97%)</title><rect x="0.0259%" y="741" width="99.9741%" height="15" fill="rgb(228,190,49)" fg:x="2" fg:w="7708"/><text x="0.2759%" y="751.50">topsnek::snakes::spaceheater::game_solver::GameSolver&lt;T&gt;::solve::{{closure}}</text></g><g><title>topsnek::util::workqueue::WorkQueue&lt;W,P&gt;::pop (20 samples, 0.26%)</title><rect x="99.7406%" y="725" width="0.2594%" height="15" fill="rgb(214,173,12)" fg:x="7690" fg:w="20"/><text x="99.9906%" y="735.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.01%)</title><rect x="99.9870%" y="709" width="0.0130%" height="15" fill="rgb(218,26,35)" fg:x="7709" fg:w="1"/><text x="100.2370%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1 samples, 0.01%)</title><rect x="99.9870%" y="693" width="0.0130%" height="15" fill="rgb(220,200,19)" fg:x="7709" fg:w="1"/><text x="100.2370%" y="703.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (1 samples, 0.01%)</title><rect x="99.9870%" y="677" width="0.0130%" height="15" fill="rgb(239,95,49)" fg:x="7709" fg:w="1"/><text x="100.2370%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (1 samples, 0.01%)</title><rect x="99.9870%" y="661" width="0.0130%" height="15" fill="rgb(235,85,53)" fg:x="7709" fg:w="1"/><text x="100.2370%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (1 samples, 0.01%)</title><rect x="99.9870%" y="645" width="0.0130%" height="15" fill="rgb(233,133,31)" fg:x="7709" fg:w="1"/><text x="100.2370%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.01%)</title><rect x="99.9870%" y="629" width="0.0130%" height="15" fill="rgb(218,25,20)" fg:x="7709" fg:w="1"/><text x="100.2370%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="99.9870%" y="613" width="0.0130%" height="15" fill="rgb(252,210,38)" fg:x="7709" fg:w="1"/><text x="100.2370%" y="623.50"></text></g></svg></svg>